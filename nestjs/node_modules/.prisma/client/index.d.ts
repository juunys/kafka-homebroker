
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type AssetPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    WalletAssets: WalletAssetPayload<ExtArgs>[]
    Orders: OrderPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    symbol: string
    price: number
    created_at: Date
    updated_at: Date
  }, ExtArgs["result"]["asset"]>
  composites: {}
}

/**
 * Model Asset
 * 
 */
export type Asset = runtime.Types.DefaultSelection<AssetPayload>
export type WalletPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    WalletAssets: WalletAssetPayload<ExtArgs>[]
    Orders: OrderPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    created_at: Date
    updated_at: Date
  }, ExtArgs["result"]["wallet"]>
  composites: {}
}

/**
 * Model Wallet
 * 
 */
export type Wallet = runtime.Types.DefaultSelection<WalletPayload>
export type WalletAssetPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    Wallet: WalletPayload<ExtArgs>
    Asset: AssetPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    wallet_id: string
    asset_id: string
    shares: number
    version: number
    created_at: Date
    updated_at: Date
  }, ExtArgs["result"]["walletAsset"]>
  composites: {}
}

/**
 * Model WalletAsset
 * 
 */
export type WalletAsset = runtime.Types.DefaultSelection<WalletAssetPayload>
export type OrderPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    Wallet: WalletPayload<ExtArgs>
    Asset: AssetPayload<ExtArgs>
    Transactions: TransactionPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    wallet_id: string
    asset_id: string
    shares: number
    price: number
    type: OrderType
    status: OrderStatus
    partial: number
    version: number
    created_at: Date
    updated_at: Date
  }, ExtArgs["result"]["order"]>
  composites: {}
}

/**
 * Model Order
 * 
 */
export type Order = runtime.Types.DefaultSelection<OrderPayload>
export type TransactionPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    Order: OrderPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    order_id: string
    related_investor_id: string
    broker_transaction_id: string
    shares: number
    price: number
    created_at: Date
    updated_at: Date
  }, ExtArgs["result"]["transaction"]>
  composites: {}
}

/**
 * Model Transaction
 * 
 */
export type Transaction = runtime.Types.DefaultSelection<TransactionPayload>

/**
 * Enums
 */

export const OrderType: {
  BUY: 'BUY',
  SELL: 'SELL'
};

export type OrderType = (typeof OrderType)[keyof typeof OrderType]


export const OrderStatus: {
  PENDING: 'PENDING',
  OPEN: 'OPEN',
  CLOSED: 'CLOSED',
  FAILED: 'FAILED'
};

export type OrderStatus = (typeof OrderStatus)[keyof typeof OrderStatus]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Assets
 * const assets = await prisma.asset.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Assets
   * const assets = await prisma.asset.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number }): Promise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.asset`: Exposes CRUD operations for the **Asset** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Assets
    * const assets = await prisma.asset.findMany()
    * ```
    */
  get asset(): Prisma.AssetDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.wallet`: Exposes CRUD operations for the **Wallet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Wallets
    * const wallets = await prisma.wallet.findMany()
    * ```
    */
  get wallet(): Prisma.WalletDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.walletAsset`: Exposes CRUD operations for the **WalletAsset** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WalletAssets
    * const walletAssets = await prisma.walletAsset.findMany()
    * ```
    */
  get walletAsset(): Prisma.WalletAssetDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **Order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.OrderDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.transaction`: Exposes CRUD operations for the **Transaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transaction.findMany()
    * ```
    */
  get transaction(): Prisma.TransactionDelegate<GlobalReject, ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 4.16.0
   * Query Engine version: b20ead4d3ab9e78ac112966e242ded703f4a052c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Asset: 'Asset',
    Wallet: 'Wallet',
    WalletAsset: 'WalletAsset',
    Order: 'Order',
    Transaction: 'Transaction'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
      meta: {
        modelProps: 'asset' | 'wallet' | 'walletAsset' | 'order' | 'transaction'
        txIsolationLevel: never
      },
      model: {
      Asset: {
        findUnique: {
          args: Prisma.AssetFindUniqueArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Asset>
          payload: AssetPayload<ExtArgs>
        }
        findUniqueOrThrow: {
          args: Prisma.AssetFindUniqueOrThrowArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Asset>
          payload: AssetPayload<ExtArgs>
        }
        findFirst: {
          args: Prisma.AssetFindFirstArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Asset>
          payload: AssetPayload<ExtArgs>
        }
        findFirstOrThrow: {
          args: Prisma.AssetFindFirstOrThrowArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Asset>
          payload: AssetPayload<ExtArgs>
        }
        findMany: {
          args: Prisma.AssetFindManyArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Asset>
          payload: AssetPayload<ExtArgs>
        }
        create: {
          args: Prisma.AssetCreateArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Asset>
          payload: AssetPayload<ExtArgs>
        }
        createMany: {
          args: Prisma.AssetCreateManyArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Asset>
          payload: AssetPayload<ExtArgs>
        }
        delete: {
          args: Prisma.AssetDeleteArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Asset>
          payload: AssetPayload<ExtArgs>
        }
        update: {
          args: Prisma.AssetUpdateArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Asset>
          payload: AssetPayload<ExtArgs>
        }
        deleteMany: {
          args: Prisma.AssetDeleteManyArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Asset>
          payload: AssetPayload<ExtArgs>
        }
        updateMany: {
          args: Prisma.AssetUpdateManyArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Asset>
          payload: AssetPayload<ExtArgs>
        }
        upsert: {
          args: Prisma.AssetUpsertArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Asset>
          payload: AssetPayload<ExtArgs>
        }
        aggregate: {
          args: Prisma.AssetAggregateArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Asset>
          payload: AssetPayload<ExtArgs>
        }
        groupBy: {
          args: Prisma.AssetGroupByArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Asset>
          payload: AssetPayload<ExtArgs>
        }
        findRaw: {
          args: Prisma.AssetFindRawArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Asset>
          payload: AssetPayload<ExtArgs>
        }
        aggregateRaw: {
          args: Prisma.AssetAggregateRawArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Asset>
          payload: AssetPayload<ExtArgs>
        }
        count: {
          args: Prisma.AssetCountArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Asset>
          payload: AssetPayload<ExtArgs>
        }
      }
      Wallet: {
        findUnique: {
          args: Prisma.WalletFindUniqueArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Wallet>
          payload: WalletPayload<ExtArgs>
        }
        findUniqueOrThrow: {
          args: Prisma.WalletFindUniqueOrThrowArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Wallet>
          payload: WalletPayload<ExtArgs>
        }
        findFirst: {
          args: Prisma.WalletFindFirstArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Wallet>
          payload: WalletPayload<ExtArgs>
        }
        findFirstOrThrow: {
          args: Prisma.WalletFindFirstOrThrowArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Wallet>
          payload: WalletPayload<ExtArgs>
        }
        findMany: {
          args: Prisma.WalletFindManyArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Wallet>
          payload: WalletPayload<ExtArgs>
        }
        create: {
          args: Prisma.WalletCreateArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Wallet>
          payload: WalletPayload<ExtArgs>
        }
        createMany: {
          args: Prisma.WalletCreateManyArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Wallet>
          payload: WalletPayload<ExtArgs>
        }
        delete: {
          args: Prisma.WalletDeleteArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Wallet>
          payload: WalletPayload<ExtArgs>
        }
        update: {
          args: Prisma.WalletUpdateArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Wallet>
          payload: WalletPayload<ExtArgs>
        }
        deleteMany: {
          args: Prisma.WalletDeleteManyArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Wallet>
          payload: WalletPayload<ExtArgs>
        }
        updateMany: {
          args: Prisma.WalletUpdateManyArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Wallet>
          payload: WalletPayload<ExtArgs>
        }
        upsert: {
          args: Prisma.WalletUpsertArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Wallet>
          payload: WalletPayload<ExtArgs>
        }
        aggregate: {
          args: Prisma.WalletAggregateArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Wallet>
          payload: WalletPayload<ExtArgs>
        }
        groupBy: {
          args: Prisma.WalletGroupByArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Wallet>
          payload: WalletPayload<ExtArgs>
        }
        findRaw: {
          args: Prisma.WalletFindRawArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Wallet>
          payload: WalletPayload<ExtArgs>
        }
        aggregateRaw: {
          args: Prisma.WalletAggregateRawArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Wallet>
          payload: WalletPayload<ExtArgs>
        }
        count: {
          args: Prisma.WalletCountArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Wallet>
          payload: WalletPayload<ExtArgs>
        }
      }
      WalletAsset: {
        findUnique: {
          args: Prisma.WalletAssetFindUniqueArgs<ExtArgs>,
          result: $Utils.OptionalFlat<WalletAsset>
          payload: WalletAssetPayload<ExtArgs>
        }
        findUniqueOrThrow: {
          args: Prisma.WalletAssetFindUniqueOrThrowArgs<ExtArgs>,
          result: $Utils.OptionalFlat<WalletAsset>
          payload: WalletAssetPayload<ExtArgs>
        }
        findFirst: {
          args: Prisma.WalletAssetFindFirstArgs<ExtArgs>,
          result: $Utils.OptionalFlat<WalletAsset>
          payload: WalletAssetPayload<ExtArgs>
        }
        findFirstOrThrow: {
          args: Prisma.WalletAssetFindFirstOrThrowArgs<ExtArgs>,
          result: $Utils.OptionalFlat<WalletAsset>
          payload: WalletAssetPayload<ExtArgs>
        }
        findMany: {
          args: Prisma.WalletAssetFindManyArgs<ExtArgs>,
          result: $Utils.OptionalFlat<WalletAsset>
          payload: WalletAssetPayload<ExtArgs>
        }
        create: {
          args: Prisma.WalletAssetCreateArgs<ExtArgs>,
          result: $Utils.OptionalFlat<WalletAsset>
          payload: WalletAssetPayload<ExtArgs>
        }
        createMany: {
          args: Prisma.WalletAssetCreateManyArgs<ExtArgs>,
          result: $Utils.OptionalFlat<WalletAsset>
          payload: WalletAssetPayload<ExtArgs>
        }
        delete: {
          args: Prisma.WalletAssetDeleteArgs<ExtArgs>,
          result: $Utils.OptionalFlat<WalletAsset>
          payload: WalletAssetPayload<ExtArgs>
        }
        update: {
          args: Prisma.WalletAssetUpdateArgs<ExtArgs>,
          result: $Utils.OptionalFlat<WalletAsset>
          payload: WalletAssetPayload<ExtArgs>
        }
        deleteMany: {
          args: Prisma.WalletAssetDeleteManyArgs<ExtArgs>,
          result: $Utils.OptionalFlat<WalletAsset>
          payload: WalletAssetPayload<ExtArgs>
        }
        updateMany: {
          args: Prisma.WalletAssetUpdateManyArgs<ExtArgs>,
          result: $Utils.OptionalFlat<WalletAsset>
          payload: WalletAssetPayload<ExtArgs>
        }
        upsert: {
          args: Prisma.WalletAssetUpsertArgs<ExtArgs>,
          result: $Utils.OptionalFlat<WalletAsset>
          payload: WalletAssetPayload<ExtArgs>
        }
        aggregate: {
          args: Prisma.WalletAssetAggregateArgs<ExtArgs>,
          result: $Utils.OptionalFlat<WalletAsset>
          payload: WalletAssetPayload<ExtArgs>
        }
        groupBy: {
          args: Prisma.WalletAssetGroupByArgs<ExtArgs>,
          result: $Utils.OptionalFlat<WalletAsset>
          payload: WalletAssetPayload<ExtArgs>
        }
        findRaw: {
          args: Prisma.WalletAssetFindRawArgs<ExtArgs>,
          result: $Utils.OptionalFlat<WalletAsset>
          payload: WalletAssetPayload<ExtArgs>
        }
        aggregateRaw: {
          args: Prisma.WalletAssetAggregateRawArgs<ExtArgs>,
          result: $Utils.OptionalFlat<WalletAsset>
          payload: WalletAssetPayload<ExtArgs>
        }
        count: {
          args: Prisma.WalletAssetCountArgs<ExtArgs>,
          result: $Utils.OptionalFlat<WalletAsset>
          payload: WalletAssetPayload<ExtArgs>
        }
      }
      Order: {
        findUnique: {
          args: Prisma.OrderFindUniqueArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Order>
          payload: OrderPayload<ExtArgs>
        }
        findUniqueOrThrow: {
          args: Prisma.OrderFindUniqueOrThrowArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Order>
          payload: OrderPayload<ExtArgs>
        }
        findFirst: {
          args: Prisma.OrderFindFirstArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Order>
          payload: OrderPayload<ExtArgs>
        }
        findFirstOrThrow: {
          args: Prisma.OrderFindFirstOrThrowArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Order>
          payload: OrderPayload<ExtArgs>
        }
        findMany: {
          args: Prisma.OrderFindManyArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Order>
          payload: OrderPayload<ExtArgs>
        }
        create: {
          args: Prisma.OrderCreateArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Order>
          payload: OrderPayload<ExtArgs>
        }
        createMany: {
          args: Prisma.OrderCreateManyArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Order>
          payload: OrderPayload<ExtArgs>
        }
        delete: {
          args: Prisma.OrderDeleteArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Order>
          payload: OrderPayload<ExtArgs>
        }
        update: {
          args: Prisma.OrderUpdateArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Order>
          payload: OrderPayload<ExtArgs>
        }
        deleteMany: {
          args: Prisma.OrderDeleteManyArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Order>
          payload: OrderPayload<ExtArgs>
        }
        updateMany: {
          args: Prisma.OrderUpdateManyArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Order>
          payload: OrderPayload<ExtArgs>
        }
        upsert: {
          args: Prisma.OrderUpsertArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Order>
          payload: OrderPayload<ExtArgs>
        }
        aggregate: {
          args: Prisma.OrderAggregateArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Order>
          payload: OrderPayload<ExtArgs>
        }
        groupBy: {
          args: Prisma.OrderGroupByArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Order>
          payload: OrderPayload<ExtArgs>
        }
        findRaw: {
          args: Prisma.OrderFindRawArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Order>
          payload: OrderPayload<ExtArgs>
        }
        aggregateRaw: {
          args: Prisma.OrderAggregateRawArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Order>
          payload: OrderPayload<ExtArgs>
        }
        count: {
          args: Prisma.OrderCountArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Order>
          payload: OrderPayload<ExtArgs>
        }
      }
      Transaction: {
        findUnique: {
          args: Prisma.TransactionFindUniqueArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Transaction>
          payload: TransactionPayload<ExtArgs>
        }
        findUniqueOrThrow: {
          args: Prisma.TransactionFindUniqueOrThrowArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Transaction>
          payload: TransactionPayload<ExtArgs>
        }
        findFirst: {
          args: Prisma.TransactionFindFirstArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Transaction>
          payload: TransactionPayload<ExtArgs>
        }
        findFirstOrThrow: {
          args: Prisma.TransactionFindFirstOrThrowArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Transaction>
          payload: TransactionPayload<ExtArgs>
        }
        findMany: {
          args: Prisma.TransactionFindManyArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Transaction>
          payload: TransactionPayload<ExtArgs>
        }
        create: {
          args: Prisma.TransactionCreateArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Transaction>
          payload: TransactionPayload<ExtArgs>
        }
        createMany: {
          args: Prisma.TransactionCreateManyArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Transaction>
          payload: TransactionPayload<ExtArgs>
        }
        delete: {
          args: Prisma.TransactionDeleteArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Transaction>
          payload: TransactionPayload<ExtArgs>
        }
        update: {
          args: Prisma.TransactionUpdateArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Transaction>
          payload: TransactionPayload<ExtArgs>
        }
        deleteMany: {
          args: Prisma.TransactionDeleteManyArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Transaction>
          payload: TransactionPayload<ExtArgs>
        }
        updateMany: {
          args: Prisma.TransactionUpdateManyArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Transaction>
          payload: TransactionPayload<ExtArgs>
        }
        upsert: {
          args: Prisma.TransactionUpsertArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Transaction>
          payload: TransactionPayload<ExtArgs>
        }
        aggregate: {
          args: Prisma.TransactionAggregateArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Transaction>
          payload: TransactionPayload<ExtArgs>
        }
        groupBy: {
          args: Prisma.TransactionGroupByArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Transaction>
          payload: TransactionPayload<ExtArgs>
        }
        findRaw: {
          args: Prisma.TransactionFindRawArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Transaction>
          payload: TransactionPayload<ExtArgs>
        }
        aggregateRaw: {
          args: Prisma.TransactionAggregateRawArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Transaction>
          payload: TransactionPayload<ExtArgs>
        }
        count: {
          args: Prisma.TransactionCountArgs<ExtArgs>,
          result: $Utils.OptionalFlat<Transaction>
          payload: TransactionPayload<ExtArgs>
        }
      }
    }
  } & {
    other: {
      $runCommandRaw: {
        args: Prisma.InputJsonObject,
        result: Prisma.JsonObject
        payload: any
      }
    }
  }
    export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AssetCountOutputType
   */


  export type AssetCountOutputType = {
    WalletAssets: number
    Orders: number
  }

  export type AssetCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    WalletAssets?: boolean | AssetCountOutputTypeCountWalletAssetsArgs
    Orders?: boolean | AssetCountOutputTypeCountOrdersArgs
  }

  // Custom InputTypes

  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetCountOutputType
     */
    select?: AssetCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeCountWalletAssetsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: WalletAssetWhereInput
  }


  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }



  /**
   * Count Type WalletCountOutputType
   */


  export type WalletCountOutputType = {
    WalletAssets: number
    Orders: number
  }

  export type WalletCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    WalletAssets?: boolean | WalletCountOutputTypeCountWalletAssetsArgs
    Orders?: boolean | WalletCountOutputTypeCountOrdersArgs
  }

  // Custom InputTypes

  /**
   * WalletCountOutputType without action
   */
  export type WalletCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletCountOutputType
     */
    select?: WalletCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * WalletCountOutputType without action
   */
  export type WalletCountOutputTypeCountWalletAssetsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: WalletAssetWhereInput
  }


  /**
   * WalletCountOutputType without action
   */
  export type WalletCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }



  /**
   * Count Type OrderCountOutputType
   */


  export type OrderCountOutputType = {
    Transactions: number
  }

  export type OrderCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Transactions?: boolean | OrderCountOutputTypeCountTransactionsArgs
  }

  // Custom InputTypes

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCountOutputType
     */
    select?: OrderCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Asset
   */


  export type AggregateAsset = {
    _count: AssetCountAggregateOutputType | null
    _avg: AssetAvgAggregateOutputType | null
    _sum: AssetSumAggregateOutputType | null
    _min: AssetMinAggregateOutputType | null
    _max: AssetMaxAggregateOutputType | null
  }

  export type AssetAvgAggregateOutputType = {
    price: number | null
  }

  export type AssetSumAggregateOutputType = {
    price: number | null
  }

  export type AssetMinAggregateOutputType = {
    id: string | null
    symbol: string | null
    price: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type AssetMaxAggregateOutputType = {
    id: string | null
    symbol: string | null
    price: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type AssetCountAggregateOutputType = {
    id: number
    symbol: number
    price: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type AssetAvgAggregateInputType = {
    price?: true
  }

  export type AssetSumAggregateInputType = {
    price?: true
  }

  export type AssetMinAggregateInputType = {
    id?: true
    symbol?: true
    price?: true
    created_at?: true
    updated_at?: true
  }

  export type AssetMaxAggregateInputType = {
    id?: true
    symbol?: true
    price?: true
    created_at?: true
    updated_at?: true
  }

  export type AssetCountAggregateInputType = {
    id?: true
    symbol?: true
    price?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type AssetAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Asset to aggregate.
     */
    where?: AssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assets to fetch.
     */
    orderBy?: Enumerable<AssetOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Assets
    **/
    _count?: true | AssetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AssetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AssetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssetMaxAggregateInputType
  }

  export type GetAssetAggregateType<T extends AssetAggregateArgs> = {
        [P in keyof T & keyof AggregateAsset]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAsset[P]>
      : GetScalarType<T[P], AggregateAsset[P]>
  }




  export type AssetGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AssetWhereInput
    orderBy?: Enumerable<AssetOrderByWithAggregationInput>
    by: AssetScalarFieldEnum[]
    having?: AssetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssetCountAggregateInputType | true
    _avg?: AssetAvgAggregateInputType
    _sum?: AssetSumAggregateInputType
    _min?: AssetMinAggregateInputType
    _max?: AssetMaxAggregateInputType
  }


  export type AssetGroupByOutputType = {
    id: string
    symbol: string
    price: number
    created_at: Date
    updated_at: Date
    _count: AssetCountAggregateOutputType | null
    _avg: AssetAvgAggregateOutputType | null
    _sum: AssetSumAggregateOutputType | null
    _min: AssetMinAggregateOutputType | null
    _max: AssetMaxAggregateOutputType | null
  }

  type GetAssetGroupByPayload<T extends AssetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AssetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssetGroupByOutputType[P]>
            : GetScalarType<T[P], AssetGroupByOutputType[P]>
        }
      >
    >


  export type AssetSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    symbol?: boolean
    price?: boolean
    created_at?: boolean
    updated_at?: boolean
    WalletAssets?: boolean | Asset$WalletAssetsArgs<ExtArgs>
    Orders?: boolean | Asset$OrdersArgs<ExtArgs>
    _count?: boolean | AssetCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["asset"]>

  export type AssetSelectScalar = {
    id?: boolean
    symbol?: boolean
    price?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type AssetInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    WalletAssets?: boolean | Asset$WalletAssetsArgs<ExtArgs>
    Orders?: boolean | Asset$OrdersArgs<ExtArgs>
    _count?: boolean | AssetCountOutputTypeArgs<ExtArgs>
  }


  type AssetGetPayload<S extends boolean | null | undefined | AssetArgs> = $Types.GetResult<AssetPayload, S>

  type AssetCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AssetFindManyArgs, 'select' | 'include'> & {
      select?: AssetCountAggregateInputType | true
    }

  export interface AssetDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Asset'], meta: { name: 'Asset' } }
    /**
     * Find zero or one Asset that matches the filter.
     * @param {AssetFindUniqueArgs} args - Arguments to find a Asset
     * @example
     * // Get one Asset
     * const asset = await prisma.asset.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AssetFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AssetFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Asset'> extends True ? Prisma__AssetClient<$Types.GetResult<AssetPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__AssetClient<$Types.GetResult<AssetPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Asset that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AssetFindUniqueOrThrowArgs} args - Arguments to find a Asset
     * @example
     * // Get one Asset
     * const asset = await prisma.asset.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AssetFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AssetFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AssetClient<$Types.GetResult<AssetPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Asset that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetFindFirstArgs} args - Arguments to find a Asset
     * @example
     * // Get one Asset
     * const asset = await prisma.asset.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AssetFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AssetFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Asset'> extends True ? Prisma__AssetClient<$Types.GetResult<AssetPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__AssetClient<$Types.GetResult<AssetPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Asset that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetFindFirstOrThrowArgs} args - Arguments to find a Asset
     * @example
     * // Get one Asset
     * const asset = await prisma.asset.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AssetFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AssetFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AssetClient<$Types.GetResult<AssetPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Assets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Assets
     * const assets = await prisma.asset.findMany()
     * 
     * // Get first 10 Assets
     * const assets = await prisma.asset.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assetWithIdOnly = await prisma.asset.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AssetFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AssetFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<AssetPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Asset.
     * @param {AssetCreateArgs} args - Arguments to create a Asset.
     * @example
     * // Create one Asset
     * const Asset = await prisma.asset.create({
     *   data: {
     *     // ... data to create a Asset
     *   }
     * })
     * 
    **/
    create<T extends AssetCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AssetCreateArgs<ExtArgs>>
    ): Prisma__AssetClient<$Types.GetResult<AssetPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Assets.
     *     @param {AssetCreateManyArgs} args - Arguments to create many Assets.
     *     @example
     *     // Create many Assets
     *     const asset = await prisma.asset.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AssetCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AssetCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Asset.
     * @param {AssetDeleteArgs} args - Arguments to delete one Asset.
     * @example
     * // Delete one Asset
     * const Asset = await prisma.asset.delete({
     *   where: {
     *     // ... filter to delete one Asset
     *   }
     * })
     * 
    **/
    delete<T extends AssetDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AssetDeleteArgs<ExtArgs>>
    ): Prisma__AssetClient<$Types.GetResult<AssetPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Asset.
     * @param {AssetUpdateArgs} args - Arguments to update one Asset.
     * @example
     * // Update one Asset
     * const asset = await prisma.asset.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AssetUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AssetUpdateArgs<ExtArgs>>
    ): Prisma__AssetClient<$Types.GetResult<AssetPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Assets.
     * @param {AssetDeleteManyArgs} args - Arguments to filter Assets to delete.
     * @example
     * // Delete a few Assets
     * const { count } = await prisma.asset.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AssetDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AssetDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Assets
     * const asset = await prisma.asset.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AssetUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AssetUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Asset.
     * @param {AssetUpsertArgs} args - Arguments to update or create a Asset.
     * @example
     * // Update or create a Asset
     * const asset = await prisma.asset.upsert({
     *   create: {
     *     // ... data to create a Asset
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Asset we want to update
     *   }
     * })
    **/
    upsert<T extends AssetUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AssetUpsertArgs<ExtArgs>>
    ): Prisma__AssetClient<$Types.GetResult<AssetPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Find zero or more Assets that matches the filter.
     * @param {AssetFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const asset = await prisma.asset.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: AssetFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Asset.
     * @param {AssetAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const asset = await prisma.asset.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: AssetAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Assets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetCountArgs} args - Arguments to filter Assets to count.
     * @example
     * // Count the number of Assets
     * const count = await prisma.asset.count({
     *   where: {
     *     // ... the filter for the Assets we want to count
     *   }
     * })
    **/
    count<T extends AssetCountArgs>(
      args?: Subset<T, AssetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Asset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssetAggregateArgs>(args: Subset<T, AssetAggregateArgs>): Prisma.PrismaPromise<GetAssetAggregateType<T>>

    /**
     * Group by Asset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssetGroupByArgs['orderBy'] }
        : { orderBy?: AssetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Asset.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AssetClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    WalletAssets<T extends Asset$WalletAssetsArgs<ExtArgs> = {}>(args?: Subset<T, Asset$WalletAssetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<WalletAssetPayload<ExtArgs>, T, 'findMany', never>| Null>;

    Orders<T extends Asset$OrdersArgs<ExtArgs> = {}>(args?: Subset<T, Asset$OrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<OrderPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Asset base type for findUnique actions
   */
  export type AssetFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Asset to fetch.
     */
    where: AssetWhereUniqueInput
  }

  /**
   * Asset findUnique
   */
  export interface AssetFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AssetFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Asset findUniqueOrThrow
   */
  export type AssetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Asset to fetch.
     */
    where: AssetWhereUniqueInput
  }


  /**
   * Asset base type for findFirst actions
   */
  export type AssetFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Asset to fetch.
     */
    where?: AssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assets to fetch.
     */
    orderBy?: Enumerable<AssetOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assets.
     */
    cursor?: AssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assets.
     */
    distinct?: Enumerable<AssetScalarFieldEnum>
  }

  /**
   * Asset findFirst
   */
  export interface AssetFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AssetFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Asset findFirstOrThrow
   */
  export type AssetFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Asset to fetch.
     */
    where?: AssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assets to fetch.
     */
    orderBy?: Enumerable<AssetOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assets.
     */
    cursor?: AssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assets.
     */
    distinct?: Enumerable<AssetScalarFieldEnum>
  }


  /**
   * Asset findMany
   */
  export type AssetFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Assets to fetch.
     */
    where?: AssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assets to fetch.
     */
    orderBy?: Enumerable<AssetOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Assets.
     */
    cursor?: AssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assets.
     */
    skip?: number
    distinct?: Enumerable<AssetScalarFieldEnum>
  }


  /**
   * Asset create
   */
  export type AssetCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * The data needed to create a Asset.
     */
    data: XOR<AssetCreateInput, AssetUncheckedCreateInput>
  }


  /**
   * Asset createMany
   */
  export type AssetCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Assets.
     */
    data: Enumerable<AssetCreateManyInput>
  }


  /**
   * Asset update
   */
  export type AssetUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * The data needed to update a Asset.
     */
    data: XOR<AssetUpdateInput, AssetUncheckedUpdateInput>
    /**
     * Choose, which Asset to update.
     */
    where: AssetWhereUniqueInput
  }


  /**
   * Asset updateMany
   */
  export type AssetUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Assets.
     */
    data: XOR<AssetUpdateManyMutationInput, AssetUncheckedUpdateManyInput>
    /**
     * Filter which Assets to update
     */
    where?: AssetWhereInput
  }


  /**
   * Asset upsert
   */
  export type AssetUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * The filter to search for the Asset to update in case it exists.
     */
    where: AssetWhereUniqueInput
    /**
     * In case the Asset found by the `where` argument doesn't exist, create a new Asset with this data.
     */
    create: XOR<AssetCreateInput, AssetUncheckedCreateInput>
    /**
     * In case the Asset was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssetUpdateInput, AssetUncheckedUpdateInput>
  }


  /**
   * Asset delete
   */
  export type AssetDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter which Asset to delete.
     */
    where: AssetWhereUniqueInput
  }


  /**
   * Asset deleteMany
   */
  export type AssetDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Assets to delete
     */
    where?: AssetWhereInput
  }


  /**
   * Asset findRaw
   */
  export type AssetFindRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Asset aggregateRaw
   */
  export type AssetAggregateRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Asset.WalletAssets
   */
  export type Asset$WalletAssetsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletAsset
     */
    select?: WalletAssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletAssetInclude<ExtArgs> | null
    where?: WalletAssetWhereInput
    orderBy?: Enumerable<WalletAssetOrderByWithRelationInput>
    cursor?: WalletAssetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<WalletAssetScalarFieldEnum>
  }


  /**
   * Asset.Orders
   */
  export type Asset$OrdersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: Enumerable<OrderOrderByWithRelationInput>
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<OrderScalarFieldEnum>
  }


  /**
   * Asset without action
   */
  export type AssetArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AssetInclude<ExtArgs> | null
  }



  /**
   * Model Wallet
   */


  export type AggregateWallet = {
    _count: WalletCountAggregateOutputType | null
    _min: WalletMinAggregateOutputType | null
    _max: WalletMaxAggregateOutputType | null
  }

  export type WalletMinAggregateOutputType = {
    id: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type WalletMaxAggregateOutputType = {
    id: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type WalletCountAggregateOutputType = {
    id: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type WalletMinAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
  }

  export type WalletMaxAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
  }

  export type WalletCountAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type WalletAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Wallet to aggregate.
     */
    where?: WalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wallets to fetch.
     */
    orderBy?: Enumerable<WalletOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wallets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Wallets
    **/
    _count?: true | WalletCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WalletMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WalletMaxAggregateInputType
  }

  export type GetWalletAggregateType<T extends WalletAggregateArgs> = {
        [P in keyof T & keyof AggregateWallet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWallet[P]>
      : GetScalarType<T[P], AggregateWallet[P]>
  }




  export type WalletGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: WalletWhereInput
    orderBy?: Enumerable<WalletOrderByWithAggregationInput>
    by: WalletScalarFieldEnum[]
    having?: WalletScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WalletCountAggregateInputType | true
    _min?: WalletMinAggregateInputType
    _max?: WalletMaxAggregateInputType
  }


  export type WalletGroupByOutputType = {
    id: string
    created_at: Date
    updated_at: Date
    _count: WalletCountAggregateOutputType | null
    _min: WalletMinAggregateOutputType | null
    _max: WalletMaxAggregateOutputType | null
  }

  type GetWalletGroupByPayload<T extends WalletGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<WalletGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WalletGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WalletGroupByOutputType[P]>
            : GetScalarType<T[P], WalletGroupByOutputType[P]>
        }
      >
    >


  export type WalletSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    WalletAssets?: boolean | Wallet$WalletAssetsArgs<ExtArgs>
    Orders?: boolean | Wallet$OrdersArgs<ExtArgs>
    _count?: boolean | WalletCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["wallet"]>

  export type WalletSelectScalar = {
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type WalletInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    WalletAssets?: boolean | Wallet$WalletAssetsArgs<ExtArgs>
    Orders?: boolean | Wallet$OrdersArgs<ExtArgs>
    _count?: boolean | WalletCountOutputTypeArgs<ExtArgs>
  }


  type WalletGetPayload<S extends boolean | null | undefined | WalletArgs> = $Types.GetResult<WalletPayload, S>

  type WalletCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<WalletFindManyArgs, 'select' | 'include'> & {
      select?: WalletCountAggregateInputType | true
    }

  export interface WalletDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Wallet'], meta: { name: 'Wallet' } }
    /**
     * Find zero or one Wallet that matches the filter.
     * @param {WalletFindUniqueArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WalletFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, WalletFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Wallet'> extends True ? Prisma__WalletClient<$Types.GetResult<WalletPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__WalletClient<$Types.GetResult<WalletPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Wallet that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WalletFindUniqueOrThrowArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WalletFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WalletFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__WalletClient<$Types.GetResult<WalletPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Wallet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletFindFirstArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WalletFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, WalletFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Wallet'> extends True ? Prisma__WalletClient<$Types.GetResult<WalletPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__WalletClient<$Types.GetResult<WalletPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Wallet that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletFindFirstOrThrowArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WalletFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WalletFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__WalletClient<$Types.GetResult<WalletPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Wallets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Wallets
     * const wallets = await prisma.wallet.findMany()
     * 
     * // Get first 10 Wallets
     * const wallets = await prisma.wallet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const walletWithIdOnly = await prisma.wallet.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WalletFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WalletFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<WalletPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Wallet.
     * @param {WalletCreateArgs} args - Arguments to create a Wallet.
     * @example
     * // Create one Wallet
     * const Wallet = await prisma.wallet.create({
     *   data: {
     *     // ... data to create a Wallet
     *   }
     * })
     * 
    **/
    create<T extends WalletCreateArgs<ExtArgs>>(
      args: SelectSubset<T, WalletCreateArgs<ExtArgs>>
    ): Prisma__WalletClient<$Types.GetResult<WalletPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Wallets.
     *     @param {WalletCreateManyArgs} args - Arguments to create many Wallets.
     *     @example
     *     // Create many Wallets
     *     const wallet = await prisma.wallet.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WalletCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WalletCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Wallet.
     * @param {WalletDeleteArgs} args - Arguments to delete one Wallet.
     * @example
     * // Delete one Wallet
     * const Wallet = await prisma.wallet.delete({
     *   where: {
     *     // ... filter to delete one Wallet
     *   }
     * })
     * 
    **/
    delete<T extends WalletDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, WalletDeleteArgs<ExtArgs>>
    ): Prisma__WalletClient<$Types.GetResult<WalletPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Wallet.
     * @param {WalletUpdateArgs} args - Arguments to update one Wallet.
     * @example
     * // Update one Wallet
     * const wallet = await prisma.wallet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WalletUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, WalletUpdateArgs<ExtArgs>>
    ): Prisma__WalletClient<$Types.GetResult<WalletPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Wallets.
     * @param {WalletDeleteManyArgs} args - Arguments to filter Wallets to delete.
     * @example
     * // Delete a few Wallets
     * const { count } = await prisma.wallet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WalletDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WalletDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wallets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Wallets
     * const wallet = await prisma.wallet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WalletUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, WalletUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Wallet.
     * @param {WalletUpsertArgs} args - Arguments to update or create a Wallet.
     * @example
     * // Update or create a Wallet
     * const wallet = await prisma.wallet.upsert({
     *   create: {
     *     // ... data to create a Wallet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Wallet we want to update
     *   }
     * })
    **/
    upsert<T extends WalletUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, WalletUpsertArgs<ExtArgs>>
    ): Prisma__WalletClient<$Types.GetResult<WalletPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Find zero or more Wallets that matches the filter.
     * @param {WalletFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const wallet = await prisma.wallet.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: WalletFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Wallet.
     * @param {WalletAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const wallet = await prisma.wallet.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: WalletAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Wallets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletCountArgs} args - Arguments to filter Wallets to count.
     * @example
     * // Count the number of Wallets
     * const count = await prisma.wallet.count({
     *   where: {
     *     // ... the filter for the Wallets we want to count
     *   }
     * })
    **/
    count<T extends WalletCountArgs>(
      args?: Subset<T, WalletCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WalletCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Wallet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WalletAggregateArgs>(args: Subset<T, WalletAggregateArgs>): Prisma.PrismaPromise<GetWalletAggregateType<T>>

    /**
     * Group by Wallet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WalletGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WalletGroupByArgs['orderBy'] }
        : { orderBy?: WalletGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WalletGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWalletGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Wallet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__WalletClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    WalletAssets<T extends Wallet$WalletAssetsArgs<ExtArgs> = {}>(args?: Subset<T, Wallet$WalletAssetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<WalletAssetPayload<ExtArgs>, T, 'findMany', never>| Null>;

    Orders<T extends Wallet$OrdersArgs<ExtArgs> = {}>(args?: Subset<T, Wallet$OrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<OrderPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Wallet base type for findUnique actions
   */
  export type WalletFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallet to fetch.
     */
    where: WalletWhereUniqueInput
  }

  /**
   * Wallet findUnique
   */
  export interface WalletFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends WalletFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Wallet findUniqueOrThrow
   */
  export type WalletFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallet to fetch.
     */
    where: WalletWhereUniqueInput
  }


  /**
   * Wallet base type for findFirst actions
   */
  export type WalletFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallet to fetch.
     */
    where?: WalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wallets to fetch.
     */
    orderBy?: Enumerable<WalletOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wallets.
     */
    cursor?: WalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wallets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wallets.
     */
    distinct?: Enumerable<WalletScalarFieldEnum>
  }

  /**
   * Wallet findFirst
   */
  export interface WalletFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends WalletFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Wallet findFirstOrThrow
   */
  export type WalletFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallet to fetch.
     */
    where?: WalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wallets to fetch.
     */
    orderBy?: Enumerable<WalletOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wallets.
     */
    cursor?: WalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wallets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wallets.
     */
    distinct?: Enumerable<WalletScalarFieldEnum>
  }


  /**
   * Wallet findMany
   */
  export type WalletFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallets to fetch.
     */
    where?: WalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wallets to fetch.
     */
    orderBy?: Enumerable<WalletOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Wallets.
     */
    cursor?: WalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wallets.
     */
    skip?: number
    distinct?: Enumerable<WalletScalarFieldEnum>
  }


  /**
   * Wallet create
   */
  export type WalletCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * The data needed to create a Wallet.
     */
    data: XOR<WalletCreateInput, WalletUncheckedCreateInput>
  }


  /**
   * Wallet createMany
   */
  export type WalletCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Wallets.
     */
    data: Enumerable<WalletCreateManyInput>
  }


  /**
   * Wallet update
   */
  export type WalletUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * The data needed to update a Wallet.
     */
    data: XOR<WalletUpdateInput, WalletUncheckedUpdateInput>
    /**
     * Choose, which Wallet to update.
     */
    where: WalletWhereUniqueInput
  }


  /**
   * Wallet updateMany
   */
  export type WalletUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Wallets.
     */
    data: XOR<WalletUpdateManyMutationInput, WalletUncheckedUpdateManyInput>
    /**
     * Filter which Wallets to update
     */
    where?: WalletWhereInput
  }


  /**
   * Wallet upsert
   */
  export type WalletUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * The filter to search for the Wallet to update in case it exists.
     */
    where: WalletWhereUniqueInput
    /**
     * In case the Wallet found by the `where` argument doesn't exist, create a new Wallet with this data.
     */
    create: XOR<WalletCreateInput, WalletUncheckedCreateInput>
    /**
     * In case the Wallet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WalletUpdateInput, WalletUncheckedUpdateInput>
  }


  /**
   * Wallet delete
   */
  export type WalletDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter which Wallet to delete.
     */
    where: WalletWhereUniqueInput
  }


  /**
   * Wallet deleteMany
   */
  export type WalletDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Wallets to delete
     */
    where?: WalletWhereInput
  }


  /**
   * Wallet findRaw
   */
  export type WalletFindRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Wallet aggregateRaw
   */
  export type WalletAggregateRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Wallet.WalletAssets
   */
  export type Wallet$WalletAssetsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletAsset
     */
    select?: WalletAssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletAssetInclude<ExtArgs> | null
    where?: WalletAssetWhereInput
    orderBy?: Enumerable<WalletAssetOrderByWithRelationInput>
    cursor?: WalletAssetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<WalletAssetScalarFieldEnum>
  }


  /**
   * Wallet.Orders
   */
  export type Wallet$OrdersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: Enumerable<OrderOrderByWithRelationInput>
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<OrderScalarFieldEnum>
  }


  /**
   * Wallet without action
   */
  export type WalletArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletInclude<ExtArgs> | null
  }



  /**
   * Model WalletAsset
   */


  export type AggregateWalletAsset = {
    _count: WalletAssetCountAggregateOutputType | null
    _avg: WalletAssetAvgAggregateOutputType | null
    _sum: WalletAssetSumAggregateOutputType | null
    _min: WalletAssetMinAggregateOutputType | null
    _max: WalletAssetMaxAggregateOutputType | null
  }

  export type WalletAssetAvgAggregateOutputType = {
    shares: number | null
    version: number | null
  }

  export type WalletAssetSumAggregateOutputType = {
    shares: number | null
    version: number | null
  }

  export type WalletAssetMinAggregateOutputType = {
    id: string | null
    wallet_id: string | null
    asset_id: string | null
    shares: number | null
    version: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type WalletAssetMaxAggregateOutputType = {
    id: string | null
    wallet_id: string | null
    asset_id: string | null
    shares: number | null
    version: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type WalletAssetCountAggregateOutputType = {
    id: number
    wallet_id: number
    asset_id: number
    shares: number
    version: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type WalletAssetAvgAggregateInputType = {
    shares?: true
    version?: true
  }

  export type WalletAssetSumAggregateInputType = {
    shares?: true
    version?: true
  }

  export type WalletAssetMinAggregateInputType = {
    id?: true
    wallet_id?: true
    asset_id?: true
    shares?: true
    version?: true
    created_at?: true
    updated_at?: true
  }

  export type WalletAssetMaxAggregateInputType = {
    id?: true
    wallet_id?: true
    asset_id?: true
    shares?: true
    version?: true
    created_at?: true
    updated_at?: true
  }

  export type WalletAssetCountAggregateInputType = {
    id?: true
    wallet_id?: true
    asset_id?: true
    shares?: true
    version?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type WalletAssetAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which WalletAsset to aggregate.
     */
    where?: WalletAssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WalletAssets to fetch.
     */
    orderBy?: Enumerable<WalletAssetOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WalletAssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WalletAssets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WalletAssets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WalletAssets
    **/
    _count?: true | WalletAssetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WalletAssetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WalletAssetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WalletAssetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WalletAssetMaxAggregateInputType
  }

  export type GetWalletAssetAggregateType<T extends WalletAssetAggregateArgs> = {
        [P in keyof T & keyof AggregateWalletAsset]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWalletAsset[P]>
      : GetScalarType<T[P], AggregateWalletAsset[P]>
  }




  export type WalletAssetGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: WalletAssetWhereInput
    orderBy?: Enumerable<WalletAssetOrderByWithAggregationInput>
    by: WalletAssetScalarFieldEnum[]
    having?: WalletAssetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WalletAssetCountAggregateInputType | true
    _avg?: WalletAssetAvgAggregateInputType
    _sum?: WalletAssetSumAggregateInputType
    _min?: WalletAssetMinAggregateInputType
    _max?: WalletAssetMaxAggregateInputType
  }


  export type WalletAssetGroupByOutputType = {
    id: string
    wallet_id: string
    asset_id: string
    shares: number
    version: number
    created_at: Date
    updated_at: Date
    _count: WalletAssetCountAggregateOutputType | null
    _avg: WalletAssetAvgAggregateOutputType | null
    _sum: WalletAssetSumAggregateOutputType | null
    _min: WalletAssetMinAggregateOutputType | null
    _max: WalletAssetMaxAggregateOutputType | null
  }

  type GetWalletAssetGroupByPayload<T extends WalletAssetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<WalletAssetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WalletAssetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WalletAssetGroupByOutputType[P]>
            : GetScalarType<T[P], WalletAssetGroupByOutputType[P]>
        }
      >
    >


  export type WalletAssetSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    wallet_id?: boolean
    asset_id?: boolean
    shares?: boolean
    version?: boolean
    created_at?: boolean
    updated_at?: boolean
    Wallet?: boolean | WalletArgs<ExtArgs>
    Asset?: boolean | AssetArgs<ExtArgs>
  }, ExtArgs["result"]["walletAsset"]>

  export type WalletAssetSelectScalar = {
    id?: boolean
    wallet_id?: boolean
    asset_id?: boolean
    shares?: boolean
    version?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type WalletAssetInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Wallet?: boolean | WalletArgs<ExtArgs>
    Asset?: boolean | AssetArgs<ExtArgs>
  }


  type WalletAssetGetPayload<S extends boolean | null | undefined | WalletAssetArgs> = $Types.GetResult<WalletAssetPayload, S>

  type WalletAssetCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<WalletAssetFindManyArgs, 'select' | 'include'> & {
      select?: WalletAssetCountAggregateInputType | true
    }

  export interface WalletAssetDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WalletAsset'], meta: { name: 'WalletAsset' } }
    /**
     * Find zero or one WalletAsset that matches the filter.
     * @param {WalletAssetFindUniqueArgs} args - Arguments to find a WalletAsset
     * @example
     * // Get one WalletAsset
     * const walletAsset = await prisma.walletAsset.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WalletAssetFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, WalletAssetFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'WalletAsset'> extends True ? Prisma__WalletAssetClient<$Types.GetResult<WalletAssetPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__WalletAssetClient<$Types.GetResult<WalletAssetPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one WalletAsset that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WalletAssetFindUniqueOrThrowArgs} args - Arguments to find a WalletAsset
     * @example
     * // Get one WalletAsset
     * const walletAsset = await prisma.walletAsset.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WalletAssetFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WalletAssetFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__WalletAssetClient<$Types.GetResult<WalletAssetPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first WalletAsset that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletAssetFindFirstArgs} args - Arguments to find a WalletAsset
     * @example
     * // Get one WalletAsset
     * const walletAsset = await prisma.walletAsset.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WalletAssetFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, WalletAssetFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'WalletAsset'> extends True ? Prisma__WalletAssetClient<$Types.GetResult<WalletAssetPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__WalletAssetClient<$Types.GetResult<WalletAssetPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first WalletAsset that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletAssetFindFirstOrThrowArgs} args - Arguments to find a WalletAsset
     * @example
     * // Get one WalletAsset
     * const walletAsset = await prisma.walletAsset.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WalletAssetFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WalletAssetFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__WalletAssetClient<$Types.GetResult<WalletAssetPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more WalletAssets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletAssetFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WalletAssets
     * const walletAssets = await prisma.walletAsset.findMany()
     * 
     * // Get first 10 WalletAssets
     * const walletAssets = await prisma.walletAsset.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const walletAssetWithIdOnly = await prisma.walletAsset.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WalletAssetFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WalletAssetFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<WalletAssetPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a WalletAsset.
     * @param {WalletAssetCreateArgs} args - Arguments to create a WalletAsset.
     * @example
     * // Create one WalletAsset
     * const WalletAsset = await prisma.walletAsset.create({
     *   data: {
     *     // ... data to create a WalletAsset
     *   }
     * })
     * 
    **/
    create<T extends WalletAssetCreateArgs<ExtArgs>>(
      args: SelectSubset<T, WalletAssetCreateArgs<ExtArgs>>
    ): Prisma__WalletAssetClient<$Types.GetResult<WalletAssetPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many WalletAssets.
     *     @param {WalletAssetCreateManyArgs} args - Arguments to create many WalletAssets.
     *     @example
     *     // Create many WalletAssets
     *     const walletAsset = await prisma.walletAsset.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WalletAssetCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WalletAssetCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a WalletAsset.
     * @param {WalletAssetDeleteArgs} args - Arguments to delete one WalletAsset.
     * @example
     * // Delete one WalletAsset
     * const WalletAsset = await prisma.walletAsset.delete({
     *   where: {
     *     // ... filter to delete one WalletAsset
     *   }
     * })
     * 
    **/
    delete<T extends WalletAssetDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, WalletAssetDeleteArgs<ExtArgs>>
    ): Prisma__WalletAssetClient<$Types.GetResult<WalletAssetPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one WalletAsset.
     * @param {WalletAssetUpdateArgs} args - Arguments to update one WalletAsset.
     * @example
     * // Update one WalletAsset
     * const walletAsset = await prisma.walletAsset.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WalletAssetUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, WalletAssetUpdateArgs<ExtArgs>>
    ): Prisma__WalletAssetClient<$Types.GetResult<WalletAssetPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more WalletAssets.
     * @param {WalletAssetDeleteManyArgs} args - Arguments to filter WalletAssets to delete.
     * @example
     * // Delete a few WalletAssets
     * const { count } = await prisma.walletAsset.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WalletAssetDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WalletAssetDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WalletAssets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletAssetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WalletAssets
     * const walletAsset = await prisma.walletAsset.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WalletAssetUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, WalletAssetUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WalletAsset.
     * @param {WalletAssetUpsertArgs} args - Arguments to update or create a WalletAsset.
     * @example
     * // Update or create a WalletAsset
     * const walletAsset = await prisma.walletAsset.upsert({
     *   create: {
     *     // ... data to create a WalletAsset
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WalletAsset we want to update
     *   }
     * })
    **/
    upsert<T extends WalletAssetUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, WalletAssetUpsertArgs<ExtArgs>>
    ): Prisma__WalletAssetClient<$Types.GetResult<WalletAssetPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Find zero or more WalletAssets that matches the filter.
     * @param {WalletAssetFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const walletAsset = await prisma.walletAsset.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: WalletAssetFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a WalletAsset.
     * @param {WalletAssetAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const walletAsset = await prisma.walletAsset.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: WalletAssetAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of WalletAssets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletAssetCountArgs} args - Arguments to filter WalletAssets to count.
     * @example
     * // Count the number of WalletAssets
     * const count = await prisma.walletAsset.count({
     *   where: {
     *     // ... the filter for the WalletAssets we want to count
     *   }
     * })
    **/
    count<T extends WalletAssetCountArgs>(
      args?: Subset<T, WalletAssetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WalletAssetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WalletAsset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletAssetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WalletAssetAggregateArgs>(args: Subset<T, WalletAssetAggregateArgs>): Prisma.PrismaPromise<GetWalletAssetAggregateType<T>>

    /**
     * Group by WalletAsset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletAssetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WalletAssetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WalletAssetGroupByArgs['orderBy'] }
        : { orderBy?: WalletAssetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WalletAssetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWalletAssetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for WalletAsset.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__WalletAssetClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Wallet<T extends WalletArgs<ExtArgs> = {}>(args?: Subset<T, WalletArgs<ExtArgs>>): Prisma__WalletClient<$Types.GetResult<WalletPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    Asset<T extends AssetArgs<ExtArgs> = {}>(args?: Subset<T, AssetArgs<ExtArgs>>): Prisma__AssetClient<$Types.GetResult<AssetPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * WalletAsset base type for findUnique actions
   */
  export type WalletAssetFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletAsset
     */
    select?: WalletAssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletAssetInclude<ExtArgs> | null
    /**
     * Filter, which WalletAsset to fetch.
     */
    where: WalletAssetWhereUniqueInput
  }

  /**
   * WalletAsset findUnique
   */
  export interface WalletAssetFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends WalletAssetFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * WalletAsset findUniqueOrThrow
   */
  export type WalletAssetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletAsset
     */
    select?: WalletAssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletAssetInclude<ExtArgs> | null
    /**
     * Filter, which WalletAsset to fetch.
     */
    where: WalletAssetWhereUniqueInput
  }


  /**
   * WalletAsset base type for findFirst actions
   */
  export type WalletAssetFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletAsset
     */
    select?: WalletAssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletAssetInclude<ExtArgs> | null
    /**
     * Filter, which WalletAsset to fetch.
     */
    where?: WalletAssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WalletAssets to fetch.
     */
    orderBy?: Enumerable<WalletAssetOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WalletAssets.
     */
    cursor?: WalletAssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WalletAssets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WalletAssets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WalletAssets.
     */
    distinct?: Enumerable<WalletAssetScalarFieldEnum>
  }

  /**
   * WalletAsset findFirst
   */
  export interface WalletAssetFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends WalletAssetFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * WalletAsset findFirstOrThrow
   */
  export type WalletAssetFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletAsset
     */
    select?: WalletAssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletAssetInclude<ExtArgs> | null
    /**
     * Filter, which WalletAsset to fetch.
     */
    where?: WalletAssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WalletAssets to fetch.
     */
    orderBy?: Enumerable<WalletAssetOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WalletAssets.
     */
    cursor?: WalletAssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WalletAssets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WalletAssets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WalletAssets.
     */
    distinct?: Enumerable<WalletAssetScalarFieldEnum>
  }


  /**
   * WalletAsset findMany
   */
  export type WalletAssetFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletAsset
     */
    select?: WalletAssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletAssetInclude<ExtArgs> | null
    /**
     * Filter, which WalletAssets to fetch.
     */
    where?: WalletAssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WalletAssets to fetch.
     */
    orderBy?: Enumerable<WalletAssetOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WalletAssets.
     */
    cursor?: WalletAssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WalletAssets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WalletAssets.
     */
    skip?: number
    distinct?: Enumerable<WalletAssetScalarFieldEnum>
  }


  /**
   * WalletAsset create
   */
  export type WalletAssetCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletAsset
     */
    select?: WalletAssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletAssetInclude<ExtArgs> | null
    /**
     * The data needed to create a WalletAsset.
     */
    data: XOR<WalletAssetCreateInput, WalletAssetUncheckedCreateInput>
  }


  /**
   * WalletAsset createMany
   */
  export type WalletAssetCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WalletAssets.
     */
    data: Enumerable<WalletAssetCreateManyInput>
  }


  /**
   * WalletAsset update
   */
  export type WalletAssetUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletAsset
     */
    select?: WalletAssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletAssetInclude<ExtArgs> | null
    /**
     * The data needed to update a WalletAsset.
     */
    data: XOR<WalletAssetUpdateInput, WalletAssetUncheckedUpdateInput>
    /**
     * Choose, which WalletAsset to update.
     */
    where: WalletAssetWhereUniqueInput
  }


  /**
   * WalletAsset updateMany
   */
  export type WalletAssetUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WalletAssets.
     */
    data: XOR<WalletAssetUpdateManyMutationInput, WalletAssetUncheckedUpdateManyInput>
    /**
     * Filter which WalletAssets to update
     */
    where?: WalletAssetWhereInput
  }


  /**
   * WalletAsset upsert
   */
  export type WalletAssetUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletAsset
     */
    select?: WalletAssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletAssetInclude<ExtArgs> | null
    /**
     * The filter to search for the WalletAsset to update in case it exists.
     */
    where: WalletAssetWhereUniqueInput
    /**
     * In case the WalletAsset found by the `where` argument doesn't exist, create a new WalletAsset with this data.
     */
    create: XOR<WalletAssetCreateInput, WalletAssetUncheckedCreateInput>
    /**
     * In case the WalletAsset was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WalletAssetUpdateInput, WalletAssetUncheckedUpdateInput>
  }


  /**
   * WalletAsset delete
   */
  export type WalletAssetDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletAsset
     */
    select?: WalletAssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletAssetInclude<ExtArgs> | null
    /**
     * Filter which WalletAsset to delete.
     */
    where: WalletAssetWhereUniqueInput
  }


  /**
   * WalletAsset deleteMany
   */
  export type WalletAssetDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which WalletAssets to delete
     */
    where?: WalletAssetWhereInput
  }


  /**
   * WalletAsset findRaw
   */
  export type WalletAssetFindRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * WalletAsset aggregateRaw
   */
  export type WalletAssetAggregateRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * WalletAsset without action
   */
  export type WalletAssetArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletAsset
     */
    select?: WalletAssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletAssetInclude<ExtArgs> | null
  }



  /**
   * Model Order
   */


  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    shares: number | null
    price: number | null
    partial: number | null
    version: number | null
  }

  export type OrderSumAggregateOutputType = {
    shares: number | null
    price: number | null
    partial: number | null
    version: number | null
  }

  export type OrderMinAggregateOutputType = {
    id: string | null
    wallet_id: string | null
    asset_id: string | null
    shares: number | null
    price: number | null
    type: OrderType | null
    status: OrderStatus | null
    partial: number | null
    version: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type OrderMaxAggregateOutputType = {
    id: string | null
    wallet_id: string | null
    asset_id: string | null
    shares: number | null
    price: number | null
    type: OrderType | null
    status: OrderStatus | null
    partial: number | null
    version: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type OrderCountAggregateOutputType = {
    id: number
    wallet_id: number
    asset_id: number
    shares: number
    price: number
    type: number
    status: number
    partial: number
    version: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    shares?: true
    price?: true
    partial?: true
    version?: true
  }

  export type OrderSumAggregateInputType = {
    shares?: true
    price?: true
    partial?: true
    version?: true
  }

  export type OrderMinAggregateInputType = {
    id?: true
    wallet_id?: true
    asset_id?: true
    shares?: true
    price?: true
    type?: true
    status?: true
    partial?: true
    version?: true
    created_at?: true
    updated_at?: true
  }

  export type OrderMaxAggregateInputType = {
    id?: true
    wallet_id?: true
    asset_id?: true
    shares?: true
    price?: true
    type?: true
    status?: true
    partial?: true
    version?: true
    created_at?: true
    updated_at?: true
  }

  export type OrderCountAggregateInputType = {
    id?: true
    wallet_id?: true
    asset_id?: true
    shares?: true
    price?: true
    type?: true
    status?: true
    partial?: true
    version?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type OrderAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Order to aggregate.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: Enumerable<OrderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }




  export type OrderGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
    orderBy?: Enumerable<OrderOrderByWithAggregationInput>
    by: OrderScalarFieldEnum[]
    having?: OrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _avg?: OrderAvgAggregateInputType
    _sum?: OrderSumAggregateInputType
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }


  export type OrderGroupByOutputType = {
    id: string
    wallet_id: string
    asset_id: string
    shares: number
    price: number
    type: OrderType
    status: OrderStatus
    partial: number
    version: number
    created_at: Date
    updated_at: Date
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends OrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<OrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      >
    >


  export type OrderSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    wallet_id?: boolean
    asset_id?: boolean
    shares?: boolean
    price?: boolean
    type?: boolean
    status?: boolean
    partial?: boolean
    version?: boolean
    created_at?: boolean
    updated_at?: boolean
    Wallet?: boolean | WalletArgs<ExtArgs>
    Asset?: boolean | AssetArgs<ExtArgs>
    Transactions?: boolean | Order$TransactionsArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectScalar = {
    id?: boolean
    wallet_id?: boolean
    asset_id?: boolean
    shares?: boolean
    price?: boolean
    type?: boolean
    status?: boolean
    partial?: boolean
    version?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type OrderInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Wallet?: boolean | WalletArgs<ExtArgs>
    Asset?: boolean | AssetArgs<ExtArgs>
    Transactions?: boolean | Order$TransactionsArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeArgs<ExtArgs>
  }


  type OrderGetPayload<S extends boolean | null | undefined | OrderArgs> = $Types.GetResult<OrderPayload, S>

  type OrderCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<OrderFindManyArgs, 'select' | 'include'> & {
      select?: OrderCountAggregateInputType | true
    }

  export interface OrderDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Order'], meta: { name: 'Order' } }
    /**
     * Find zero or one Order that matches the filter.
     * @param {OrderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OrderFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, OrderFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Order'> extends True ? Prisma__OrderClient<$Types.GetResult<OrderPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__OrderClient<$Types.GetResult<OrderPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Order that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {OrderFindUniqueOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OrderFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__OrderClient<$Types.GetResult<OrderPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OrderFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, OrderFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Order'> extends True ? Prisma__OrderClient<$Types.GetResult<OrderPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__OrderClient<$Types.GetResult<OrderPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Order that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OrderFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__OrderClient<$Types.GetResult<OrderPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderWithIdOnly = await prisma.order.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OrderFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<OrderPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Order.
     * @param {OrderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
    **/
    create<T extends OrderCreateArgs<ExtArgs>>(
      args: SelectSubset<T, OrderCreateArgs<ExtArgs>>
    ): Prisma__OrderClient<$Types.GetResult<OrderPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Orders.
     *     @param {OrderCreateManyArgs} args - Arguments to create many Orders.
     *     @example
     *     // Create many Orders
     *     const order = await prisma.order.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OrderCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Order.
     * @param {OrderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
    **/
    delete<T extends OrderDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, OrderDeleteArgs<ExtArgs>>
    ): Prisma__OrderClient<$Types.GetResult<OrderPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Order.
     * @param {OrderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OrderUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, OrderUpdateArgs<ExtArgs>>
    ): Prisma__OrderClient<$Types.GetResult<OrderPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Orders.
     * @param {OrderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OrderDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OrderUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, OrderUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Order.
     * @param {OrderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
    **/
    upsert<T extends OrderUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, OrderUpsertArgs<ExtArgs>>
    ): Prisma__OrderClient<$Types.GetResult<OrderPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Find zero or more Orders that matches the filter.
     * @param {OrderFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const order = await prisma.order.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: OrderFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Order.
     * @param {OrderAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const order = await prisma.order.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: OrderAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrderCountArgs>(
      args?: Subset<T, OrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): Prisma.PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderGroupByArgs['orderBy'] }
        : { orderBy?: OrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OrderClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Wallet<T extends WalletArgs<ExtArgs> = {}>(args?: Subset<T, WalletArgs<ExtArgs>>): Prisma__WalletClient<$Types.GetResult<WalletPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    Asset<T extends AssetArgs<ExtArgs> = {}>(args?: Subset<T, AssetArgs<ExtArgs>>): Prisma__AssetClient<$Types.GetResult<AssetPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    Transactions<T extends Order$TransactionsArgs<ExtArgs> = {}>(args?: Subset<T, Order$TransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<TransactionPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Order base type for findUnique actions
   */
  export type OrderFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findUnique
   */
  export interface OrderFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends OrderFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Order findUniqueOrThrow
   */
  export type OrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }


  /**
   * Order base type for findFirst actions
   */
  export type OrderFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: Enumerable<OrderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: Enumerable<OrderScalarFieldEnum>
  }

  /**
   * Order findFirst
   */
  export interface OrderFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends OrderFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Order findFirstOrThrow
   */
  export type OrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: Enumerable<OrderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: Enumerable<OrderScalarFieldEnum>
  }


  /**
   * Order findMany
   */
  export type OrderFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: Enumerable<OrderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    distinct?: Enumerable<OrderScalarFieldEnum>
  }


  /**
   * Order create
   */
  export type OrderCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to create a Order.
     */
    data: XOR<OrderCreateInput, OrderUncheckedCreateInput>
  }


  /**
   * Order createMany
   */
  export type OrderCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Orders.
     */
    data: Enumerable<OrderCreateManyInput>
  }


  /**
   * Order update
   */
  export type OrderUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to update a Order.
     */
    data: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
    /**
     * Choose, which Order to update.
     */
    where: OrderWhereUniqueInput
  }


  /**
   * Order updateMany
   */
  export type OrderUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
  }


  /**
   * Order upsert
   */
  export type OrderUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The filter to search for the Order to update in case it exists.
     */
    where: OrderWhereUniqueInput
    /**
     * In case the Order found by the `where` argument doesn't exist, create a new Order with this data.
     */
    create: XOR<OrderCreateInput, OrderUncheckedCreateInput>
    /**
     * In case the Order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
  }


  /**
   * Order delete
   */
  export type OrderDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter which Order to delete.
     */
    where: OrderWhereUniqueInput
  }


  /**
   * Order deleteMany
   */
  export type OrderDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orders to delete
     */
    where?: OrderWhereInput
  }


  /**
   * Order findRaw
   */
  export type OrderFindRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Order aggregateRaw
   */
  export type OrderAggregateRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Order.Transactions
   */
  export type Order$TransactionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: Enumerable<TransactionOrderByWithRelationInput>
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TransactionScalarFieldEnum>
  }


  /**
   * Order without action
   */
  export type OrderArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
  }



  /**
   * Model Transaction
   */


  export type AggregateTransaction = {
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  export type TransactionAvgAggregateOutputType = {
    shares: number | null
    price: number | null
  }

  export type TransactionSumAggregateOutputType = {
    shares: number | null
    price: number | null
  }

  export type TransactionMinAggregateOutputType = {
    id: string | null
    order_id: string | null
    related_investor_id: string | null
    broker_transaction_id: string | null
    shares: number | null
    price: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type TransactionMaxAggregateOutputType = {
    id: string | null
    order_id: string | null
    related_investor_id: string | null
    broker_transaction_id: string | null
    shares: number | null
    price: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type TransactionCountAggregateOutputType = {
    id: number
    order_id: number
    related_investor_id: number
    broker_transaction_id: number
    shares: number
    price: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type TransactionAvgAggregateInputType = {
    shares?: true
    price?: true
  }

  export type TransactionSumAggregateInputType = {
    shares?: true
    price?: true
  }

  export type TransactionMinAggregateInputType = {
    id?: true
    order_id?: true
    related_investor_id?: true
    broker_transaction_id?: true
    shares?: true
    price?: true
    created_at?: true
    updated_at?: true
  }

  export type TransactionMaxAggregateInputType = {
    id?: true
    order_id?: true
    related_investor_id?: true
    broker_transaction_id?: true
    shares?: true
    price?: true
    created_at?: true
    updated_at?: true
  }

  export type TransactionCountAggregateInputType = {
    id?: true
    order_id?: true
    related_investor_id?: true
    broker_transaction_id?: true
    shares?: true
    price?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type TransactionAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transaction to aggregate.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: Enumerable<TransactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transactions
    **/
    _count?: true | TransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionMaxAggregateInputType
  }

  export type GetTransactionAggregateType<T extends TransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransaction[P]>
      : GetScalarType<T[P], AggregateTransaction[P]>
  }




  export type TransactionGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
    orderBy?: Enumerable<TransactionOrderByWithAggregationInput>
    by: TransactionScalarFieldEnum[]
    having?: TransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionCountAggregateInputType | true
    _avg?: TransactionAvgAggregateInputType
    _sum?: TransactionSumAggregateInputType
    _min?: TransactionMinAggregateInputType
    _max?: TransactionMaxAggregateInputType
  }


  export type TransactionGroupByOutputType = {
    id: string
    order_id: string
    related_investor_id: string
    broker_transaction_id: string
    shares: number
    price: number
    created_at: Date
    updated_at: Date
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  type GetTransactionGroupByPayload<T extends TransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionGroupByOutputType[P]>
        }
      >
    >


  export type TransactionSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order_id?: boolean
    related_investor_id?: boolean
    broker_transaction_id?: boolean
    shares?: boolean
    price?: boolean
    created_at?: boolean
    updated_at?: boolean
    Order?: boolean | OrderArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectScalar = {
    id?: boolean
    order_id?: boolean
    related_investor_id?: boolean
    broker_transaction_id?: boolean
    shares?: boolean
    price?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type TransactionInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Order?: boolean | OrderArgs<ExtArgs>
  }


  type TransactionGetPayload<S extends boolean | null | undefined | TransactionArgs> = $Types.GetResult<TransactionPayload, S>

  type TransactionCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<TransactionFindManyArgs, 'select' | 'include'> & {
      select?: TransactionCountAggregateInputType | true
    }

  export interface TransactionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transaction'], meta: { name: 'Transaction' } }
    /**
     * Find zero or one Transaction that matches the filter.
     * @param {TransactionFindUniqueArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TransactionFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TransactionFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Transaction'> extends True ? Prisma__TransactionClient<$Types.GetResult<TransactionPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__TransactionClient<$Types.GetResult<TransactionPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Transaction that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TransactionFindUniqueOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TransactionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TransactionClient<$Types.GetResult<TransactionPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Transaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TransactionFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TransactionFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Transaction'> extends True ? Prisma__TransactionClient<$Types.GetResult<TransactionPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__TransactionClient<$Types.GetResult<TransactionPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Transaction that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TransactionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TransactionClient<$Types.GetResult<TransactionPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transaction.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionWithIdOnly = await prisma.transaction.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TransactionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<TransactionPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Transaction.
     * @param {TransactionCreateArgs} args - Arguments to create a Transaction.
     * @example
     * // Create one Transaction
     * const Transaction = await prisma.transaction.create({
     *   data: {
     *     // ... data to create a Transaction
     *   }
     * })
     * 
    **/
    create<T extends TransactionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionCreateArgs<ExtArgs>>
    ): Prisma__TransactionClient<$Types.GetResult<TransactionPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Transactions.
     *     @param {TransactionCreateManyArgs} args - Arguments to create many Transactions.
     *     @example
     *     // Create many Transactions
     *     const transaction = await prisma.transaction.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TransactionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Transaction.
     * @param {TransactionDeleteArgs} args - Arguments to delete one Transaction.
     * @example
     * // Delete one Transaction
     * const Transaction = await prisma.transaction.delete({
     *   where: {
     *     // ... filter to delete one Transaction
     *   }
     * })
     * 
    **/
    delete<T extends TransactionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionDeleteArgs<ExtArgs>>
    ): Prisma__TransactionClient<$Types.GetResult<TransactionPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Transaction.
     * @param {TransactionUpdateArgs} args - Arguments to update one Transaction.
     * @example
     * // Update one Transaction
     * const transaction = await prisma.transaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TransactionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionUpdateArgs<ExtArgs>>
    ): Prisma__TransactionClient<$Types.GetResult<TransactionPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Transactions.
     * @param {TransactionDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TransactionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TransactionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Transaction.
     * @param {TransactionUpsertArgs} args - Arguments to update or create a Transaction.
     * @example
     * // Update or create a Transaction
     * const transaction = await prisma.transaction.upsert({
     *   create: {
     *     // ... data to create a Transaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transaction we want to update
     *   }
     * })
    **/
    upsert<T extends TransactionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionUpsertArgs<ExtArgs>>
    ): Prisma__TransactionClient<$Types.GetResult<TransactionPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Find zero or more Transactions that matches the filter.
     * @param {TransactionFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const transaction = await prisma.transaction.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: TransactionFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Transaction.
     * @param {TransactionAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const transaction = await prisma.transaction.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: TransactionAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transaction.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends TransactionCountArgs>(
      args?: Subset<T, TransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionAggregateArgs>(args: Subset<T, TransactionAggregateArgs>): Prisma.PrismaPromise<GetTransactionAggregateType<T>>

    /**
     * Group by Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionGroupByArgs['orderBy'] }
        : { orderBy?: TransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Transaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TransactionClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Order<T extends OrderArgs<ExtArgs> = {}>(args?: Subset<T, OrderArgs<ExtArgs>>): Prisma__OrderClient<$Types.GetResult<OrderPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Transaction base type for findUnique actions
   */
  export type TransactionFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findUnique
   */
  export interface TransactionFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends TransactionFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Transaction findUniqueOrThrow
   */
  export type TransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }


  /**
   * Transaction base type for findFirst actions
   */
  export type TransactionFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: Enumerable<TransactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: Enumerable<TransactionScalarFieldEnum>
  }

  /**
   * Transaction findFirst
   */
  export interface TransactionFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends TransactionFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Transaction findFirstOrThrow
   */
  export type TransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: Enumerable<TransactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: Enumerable<TransactionScalarFieldEnum>
  }


  /**
   * Transaction findMany
   */
  export type TransactionFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transactions to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: Enumerable<TransactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    distinct?: Enumerable<TransactionScalarFieldEnum>
  }


  /**
   * Transaction create
   */
  export type TransactionCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a Transaction.
     */
    data: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
  }


  /**
   * Transaction createMany
   */
  export type TransactionCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transactions.
     */
    data: Enumerable<TransactionCreateManyInput>
  }


  /**
   * Transaction update
   */
  export type TransactionUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a Transaction.
     */
    data: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
    /**
     * Choose, which Transaction to update.
     */
    where: TransactionWhereUniqueInput
  }


  /**
   * Transaction updateMany
   */
  export type TransactionUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionWhereInput
  }


  /**
   * Transaction upsert
   */
  export type TransactionUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the Transaction to update in case it exists.
     */
    where: TransactionWhereUniqueInput
    /**
     * In case the Transaction found by the `where` argument doesn't exist, create a new Transaction with this data.
     */
    create: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
    /**
     * In case the Transaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
  }


  /**
   * Transaction delete
   */
  export type TransactionDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter which Transaction to delete.
     */
    where: TransactionWhereUniqueInput
  }


  /**
   * Transaction deleteMany
   */
  export type TransactionDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transactions to delete
     */
    where?: TransactionWhereInput
  }


  /**
   * Transaction findRaw
   */
  export type TransactionFindRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Transaction aggregateRaw
   */
  export type TransactionAggregateRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Transaction without action
   */
  export type TransactionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransactionInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const AssetScalarFieldEnum: {
    id: 'id',
    symbol: 'symbol',
    price: 'price',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type AssetScalarFieldEnum = (typeof AssetScalarFieldEnum)[keyof typeof AssetScalarFieldEnum]


  export const WalletScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type WalletScalarFieldEnum = (typeof WalletScalarFieldEnum)[keyof typeof WalletScalarFieldEnum]


  export const WalletAssetScalarFieldEnum: {
    id: 'id',
    wallet_id: 'wallet_id',
    asset_id: 'asset_id',
    shares: 'shares',
    version: 'version',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type WalletAssetScalarFieldEnum = (typeof WalletAssetScalarFieldEnum)[keyof typeof WalletAssetScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    id: 'id',
    wallet_id: 'wallet_id',
    asset_id: 'asset_id',
    shares: 'shares',
    price: 'price',
    type: 'type',
    status: 'status',
    partial: 'partial',
    version: 'version',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const TransactionScalarFieldEnum: {
    id: 'id',
    order_id: 'order_id',
    related_investor_id: 'related_investor_id',
    broker_transaction_id: 'broker_transaction_id',
    shares: 'shares',
    price: 'price',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type TransactionScalarFieldEnum = (typeof TransactionScalarFieldEnum)[keyof typeof TransactionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type AssetWhereInput = {
    AND?: Enumerable<AssetWhereInput>
    OR?: Enumerable<AssetWhereInput>
    NOT?: Enumerable<AssetWhereInput>
    id?: StringFilter | string
    symbol?: StringFilter | string
    price?: FloatFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    WalletAssets?: WalletAssetListRelationFilter
    Orders?: OrderListRelationFilter
  }

  export type AssetOrderByWithRelationInput = {
    id?: SortOrder
    symbol?: SortOrder
    price?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    WalletAssets?: WalletAssetOrderByRelationAggregateInput
    Orders?: OrderOrderByRelationAggregateInput
  }

  export type AssetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: Enumerable<AssetWhereInput>
    OR?: Enumerable<AssetWhereInput>
    NOT?: Enumerable<AssetWhereInput>
    symbol?: StringFilter | string
    price?: FloatFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    WalletAssets?: WalletAssetListRelationFilter
    Orders?: OrderListRelationFilter
  }, "id">

  export type AssetOrderByWithAggregationInput = {
    id?: SortOrder
    symbol?: SortOrder
    price?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: AssetCountOrderByAggregateInput
    _avg?: AssetAvgOrderByAggregateInput
    _max?: AssetMaxOrderByAggregateInput
    _min?: AssetMinOrderByAggregateInput
    _sum?: AssetSumOrderByAggregateInput
  }

  export type AssetScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AssetScalarWhereWithAggregatesInput>
    OR?: Enumerable<AssetScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AssetScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    symbol?: StringWithAggregatesFilter | string
    price?: FloatWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type WalletWhereInput = {
    AND?: Enumerable<WalletWhereInput>
    OR?: Enumerable<WalletWhereInput>
    NOT?: Enumerable<WalletWhereInput>
    id?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    WalletAssets?: WalletAssetListRelationFilter
    Orders?: OrderListRelationFilter
  }

  export type WalletOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    WalletAssets?: WalletAssetOrderByRelationAggregateInput
    Orders?: OrderOrderByRelationAggregateInput
  }

  export type WalletWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: Enumerable<WalletWhereInput>
    OR?: Enumerable<WalletWhereInput>
    NOT?: Enumerable<WalletWhereInput>
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    WalletAssets?: WalletAssetListRelationFilter
    Orders?: OrderListRelationFilter
  }, "id">

  export type WalletOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: WalletCountOrderByAggregateInput
    _max?: WalletMaxOrderByAggregateInput
    _min?: WalletMinOrderByAggregateInput
  }

  export type WalletScalarWhereWithAggregatesInput = {
    AND?: Enumerable<WalletScalarWhereWithAggregatesInput>
    OR?: Enumerable<WalletScalarWhereWithAggregatesInput>
    NOT?: Enumerable<WalletScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type WalletAssetWhereInput = {
    AND?: Enumerable<WalletAssetWhereInput>
    OR?: Enumerable<WalletAssetWhereInput>
    NOT?: Enumerable<WalletAssetWhereInput>
    id?: StringFilter | string
    wallet_id?: StringFilter | string
    asset_id?: StringFilter | string
    shares?: IntFilter | number
    version?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    Wallet?: XOR<WalletRelationFilter, WalletWhereInput>
    Asset?: XOR<AssetRelationFilter, AssetWhereInput>
  }

  export type WalletAssetOrderByWithRelationInput = {
    id?: SortOrder
    wallet_id?: SortOrder
    asset_id?: SortOrder
    shares?: SortOrder
    version?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    Wallet?: WalletOrderByWithRelationInput
    Asset?: AssetOrderByWithRelationInput
  }

  export type WalletAssetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    wallet_id_asset_id?: WalletAssetWallet_idAsset_idCompoundUniqueInput
    AND?: Enumerable<WalletAssetWhereInput>
    OR?: Enumerable<WalletAssetWhereInput>
    NOT?: Enumerable<WalletAssetWhereInput>
    wallet_id?: StringFilter | string
    asset_id?: StringFilter | string
    shares?: IntFilter | number
    version?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    Wallet?: XOR<WalletRelationFilter, WalletWhereInput>
    Asset?: XOR<AssetRelationFilter, AssetWhereInput>
  }, "id" | "wallet_id_asset_id">

  export type WalletAssetOrderByWithAggregationInput = {
    id?: SortOrder
    wallet_id?: SortOrder
    asset_id?: SortOrder
    shares?: SortOrder
    version?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: WalletAssetCountOrderByAggregateInput
    _avg?: WalletAssetAvgOrderByAggregateInput
    _max?: WalletAssetMaxOrderByAggregateInput
    _min?: WalletAssetMinOrderByAggregateInput
    _sum?: WalletAssetSumOrderByAggregateInput
  }

  export type WalletAssetScalarWhereWithAggregatesInput = {
    AND?: Enumerable<WalletAssetScalarWhereWithAggregatesInput>
    OR?: Enumerable<WalletAssetScalarWhereWithAggregatesInput>
    NOT?: Enumerable<WalletAssetScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    wallet_id?: StringWithAggregatesFilter | string
    asset_id?: StringWithAggregatesFilter | string
    shares?: IntWithAggregatesFilter | number
    version?: IntWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type OrderWhereInput = {
    AND?: Enumerable<OrderWhereInput>
    OR?: Enumerable<OrderWhereInput>
    NOT?: Enumerable<OrderWhereInput>
    id?: StringFilter | string
    wallet_id?: StringFilter | string
    asset_id?: StringFilter | string
    shares?: IntFilter | number
    price?: FloatFilter | number
    type?: EnumOrderTypeFilter | OrderType
    status?: EnumOrderStatusFilter | OrderStatus
    partial?: IntFilter | number
    version?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    Wallet?: XOR<WalletRelationFilter, WalletWhereInput>
    Asset?: XOR<AssetRelationFilter, AssetWhereInput>
    Transactions?: TransactionListRelationFilter
  }

  export type OrderOrderByWithRelationInput = {
    id?: SortOrder
    wallet_id?: SortOrder
    asset_id?: SortOrder
    shares?: SortOrder
    price?: SortOrder
    type?: SortOrder
    status?: SortOrder
    partial?: SortOrder
    version?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    Wallet?: WalletOrderByWithRelationInput
    Asset?: AssetOrderByWithRelationInput
    Transactions?: TransactionOrderByRelationAggregateInput
  }

  export type OrderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: Enumerable<OrderWhereInput>
    OR?: Enumerable<OrderWhereInput>
    NOT?: Enumerable<OrderWhereInput>
    wallet_id?: StringFilter | string
    asset_id?: StringFilter | string
    shares?: IntFilter | number
    price?: FloatFilter | number
    type?: EnumOrderTypeFilter | OrderType
    status?: EnumOrderStatusFilter | OrderStatus
    partial?: IntFilter | number
    version?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    Wallet?: XOR<WalletRelationFilter, WalletWhereInput>
    Asset?: XOR<AssetRelationFilter, AssetWhereInput>
    Transactions?: TransactionListRelationFilter
  }, "id">

  export type OrderOrderByWithAggregationInput = {
    id?: SortOrder
    wallet_id?: SortOrder
    asset_id?: SortOrder
    shares?: SortOrder
    price?: SortOrder
    type?: SortOrder
    status?: SortOrder
    partial?: SortOrder
    version?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: OrderCountOrderByAggregateInput
    _avg?: OrderAvgOrderByAggregateInput
    _max?: OrderMaxOrderByAggregateInput
    _min?: OrderMinOrderByAggregateInput
    _sum?: OrderSumOrderByAggregateInput
  }

  export type OrderScalarWhereWithAggregatesInput = {
    AND?: Enumerable<OrderScalarWhereWithAggregatesInput>
    OR?: Enumerable<OrderScalarWhereWithAggregatesInput>
    NOT?: Enumerable<OrderScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    wallet_id?: StringWithAggregatesFilter | string
    asset_id?: StringWithAggregatesFilter | string
    shares?: IntWithAggregatesFilter | number
    price?: FloatWithAggregatesFilter | number
    type?: EnumOrderTypeWithAggregatesFilter | OrderType
    status?: EnumOrderStatusWithAggregatesFilter | OrderStatus
    partial?: IntWithAggregatesFilter | number
    version?: IntWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TransactionWhereInput = {
    AND?: Enumerable<TransactionWhereInput>
    OR?: Enumerable<TransactionWhereInput>
    NOT?: Enumerable<TransactionWhereInput>
    id?: StringFilter | string
    order_id?: StringFilter | string
    related_investor_id?: StringFilter | string
    broker_transaction_id?: StringFilter | string
    shares?: IntFilter | number
    price?: FloatFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    Order?: XOR<OrderRelationFilter, OrderWhereInput>
  }

  export type TransactionOrderByWithRelationInput = {
    id?: SortOrder
    order_id?: SortOrder
    related_investor_id?: SortOrder
    broker_transaction_id?: SortOrder
    shares?: SortOrder
    price?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    Order?: OrderOrderByWithRelationInput
  }

  export type TransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: Enumerable<TransactionWhereInput>
    OR?: Enumerable<TransactionWhereInput>
    NOT?: Enumerable<TransactionWhereInput>
    order_id?: StringFilter | string
    related_investor_id?: StringFilter | string
    broker_transaction_id?: StringFilter | string
    shares?: IntFilter | number
    price?: FloatFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    Order?: XOR<OrderRelationFilter, OrderWhereInput>
  }, "id">

  export type TransactionOrderByWithAggregationInput = {
    id?: SortOrder
    order_id?: SortOrder
    related_investor_id?: SortOrder
    broker_transaction_id?: SortOrder
    shares?: SortOrder
    price?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: TransactionCountOrderByAggregateInput
    _avg?: TransactionAvgOrderByAggregateInput
    _max?: TransactionMaxOrderByAggregateInput
    _min?: TransactionMinOrderByAggregateInput
    _sum?: TransactionSumOrderByAggregateInput
  }

  export type TransactionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TransactionScalarWhereWithAggregatesInput>
    OR?: Enumerable<TransactionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TransactionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    order_id?: StringWithAggregatesFilter | string
    related_investor_id?: StringWithAggregatesFilter | string
    broker_transaction_id?: StringWithAggregatesFilter | string
    shares?: IntWithAggregatesFilter | number
    price?: FloatWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type AssetCreateInput = {
    id: string
    symbol: string
    price: number
    created_at?: Date | string
    updated_at?: Date | string
    WalletAssets?: WalletAssetCreateNestedManyWithoutAssetInput
    Orders?: OrderCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateInput = {
    id: string
    symbol: string
    price: number
    created_at?: Date | string
    updated_at?: Date | string
    WalletAssets?: WalletAssetUncheckedCreateNestedManyWithoutAssetInput
    Orders?: OrderUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetUpdateInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    WalletAssets?: WalletAssetUpdateManyWithoutAssetNestedInput
    Orders?: OrderUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    WalletAssets?: WalletAssetUncheckedUpdateManyWithoutAssetNestedInput
    Orders?: OrderUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type AssetCreateManyInput = {
    id: string
    symbol: string
    price: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type AssetUpdateManyMutationInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetUncheckedUpdateManyInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WalletCreateInput = {
    id: string
    created_at?: Date | string
    updated_at?: Date | string
    WalletAssets?: WalletAssetCreateNestedManyWithoutWalletInput
    Orders?: OrderCreateNestedManyWithoutWalletInput
  }

  export type WalletUncheckedCreateInput = {
    id: string
    created_at?: Date | string
    updated_at?: Date | string
    WalletAssets?: WalletAssetUncheckedCreateNestedManyWithoutWalletInput
    Orders?: OrderUncheckedCreateNestedManyWithoutWalletInput
  }

  export type WalletUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    WalletAssets?: WalletAssetUpdateManyWithoutWalletNestedInput
    Orders?: OrderUpdateManyWithoutWalletNestedInput
  }

  export type WalletUncheckedUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    WalletAssets?: WalletAssetUncheckedUpdateManyWithoutWalletNestedInput
    Orders?: OrderUncheckedUpdateManyWithoutWalletNestedInput
  }

  export type WalletCreateManyInput = {
    id: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type WalletUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WalletUncheckedUpdateManyInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WalletAssetCreateInput = {
    id?: string
    shares: number
    version: number
    created_at?: Date | string
    updated_at?: Date | string
    Wallet: WalletCreateNestedOneWithoutWalletAssetsInput
    Asset: AssetCreateNestedOneWithoutWalletAssetsInput
  }

  export type WalletAssetUncheckedCreateInput = {
    id?: string
    wallet_id: string
    asset_id: string
    shares: number
    version: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type WalletAssetUpdateInput = {
    shares?: IntFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Wallet?: WalletUpdateOneRequiredWithoutWalletAssetsNestedInput
    Asset?: AssetUpdateOneRequiredWithoutWalletAssetsNestedInput
  }

  export type WalletAssetUncheckedUpdateInput = {
    wallet_id?: StringFieldUpdateOperationsInput | string
    asset_id?: StringFieldUpdateOperationsInput | string
    shares?: IntFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WalletAssetCreateManyInput = {
    id?: string
    wallet_id: string
    asset_id: string
    shares: number
    version: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type WalletAssetUpdateManyMutationInput = {
    shares?: IntFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WalletAssetUncheckedUpdateManyInput = {
    wallet_id?: StringFieldUpdateOperationsInput | string
    asset_id?: StringFieldUpdateOperationsInput | string
    shares?: IntFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderCreateInput = {
    id?: string
    shares: number
    price: number
    type: OrderType
    status: OrderStatus
    partial: number
    version: number
    created_at?: Date | string
    updated_at?: Date | string
    Wallet: WalletCreateNestedOneWithoutOrdersInput
    Asset: AssetCreateNestedOneWithoutOrdersInput
    Transactions?: TransactionCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateInput = {
    id?: string
    wallet_id: string
    asset_id: string
    shares: number
    price: number
    type: OrderType
    status: OrderStatus
    partial: number
    version: number
    created_at?: Date | string
    updated_at?: Date | string
    Transactions?: TransactionUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderUpdateInput = {
    shares?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    type?: EnumOrderTypeFieldUpdateOperationsInput | OrderType
    status?: EnumOrderStatusFieldUpdateOperationsInput | OrderStatus
    partial?: IntFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Wallet?: WalletUpdateOneRequiredWithoutOrdersNestedInput
    Asset?: AssetUpdateOneRequiredWithoutOrdersNestedInput
    Transactions?: TransactionUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateInput = {
    wallet_id?: StringFieldUpdateOperationsInput | string
    asset_id?: StringFieldUpdateOperationsInput | string
    shares?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    type?: EnumOrderTypeFieldUpdateOperationsInput | OrderType
    status?: EnumOrderStatusFieldUpdateOperationsInput | OrderStatus
    partial?: IntFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Transactions?: TransactionUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderCreateManyInput = {
    id?: string
    wallet_id: string
    asset_id: string
    shares: number
    price: number
    type: OrderType
    status: OrderStatus
    partial: number
    version: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type OrderUpdateManyMutationInput = {
    shares?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    type?: EnumOrderTypeFieldUpdateOperationsInput | OrderType
    status?: EnumOrderStatusFieldUpdateOperationsInput | OrderStatus
    partial?: IntFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUncheckedUpdateManyInput = {
    wallet_id?: StringFieldUpdateOperationsInput | string
    asset_id?: StringFieldUpdateOperationsInput | string
    shares?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    type?: EnumOrderTypeFieldUpdateOperationsInput | OrderType
    status?: EnumOrderStatusFieldUpdateOperationsInput | OrderStatus
    partial?: IntFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateInput = {
    id?: string
    related_investor_id: string
    broker_transaction_id: string
    shares: number
    price: number
    created_at?: Date | string
    updated_at?: Date | string
    Order: OrderCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateInput = {
    id?: string
    order_id: string
    related_investor_id: string
    broker_transaction_id: string
    shares: number
    price: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type TransactionUpdateInput = {
    related_investor_id?: StringFieldUpdateOperationsInput | string
    broker_transaction_id?: StringFieldUpdateOperationsInput | string
    shares?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Order?: OrderUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateInput = {
    order_id?: StringFieldUpdateOperationsInput | string
    related_investor_id?: StringFieldUpdateOperationsInput | string
    broker_transaction_id?: StringFieldUpdateOperationsInput | string
    shares?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateManyInput = {
    id?: string
    order_id: string
    related_investor_id: string
    broker_transaction_id: string
    shares: number
    price: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type TransactionUpdateManyMutationInput = {
    related_investor_id?: StringFieldUpdateOperationsInput | string
    broker_transaction_id?: StringFieldUpdateOperationsInput | string
    shares?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyInput = {
    order_id?: StringFieldUpdateOperationsInput | string
    related_investor_id?: StringFieldUpdateOperationsInput | string
    broker_transaction_id?: StringFieldUpdateOperationsInput | string
    shares?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type WalletAssetListRelationFilter = {
    every?: WalletAssetWhereInput
    some?: WalletAssetWhereInput
    none?: WalletAssetWhereInput
  }

  export type OrderListRelationFilter = {
    every?: OrderWhereInput
    some?: OrderWhereInput
    none?: OrderWhereInput
  }

  export type WalletAssetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AssetCountOrderByAggregateInput = {
    id?: SortOrder
    symbol?: SortOrder
    price?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type AssetAvgOrderByAggregateInput = {
    price?: SortOrder
  }

  export type AssetMaxOrderByAggregateInput = {
    id?: SortOrder
    symbol?: SortOrder
    price?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type AssetMinOrderByAggregateInput = {
    id?: SortOrder
    symbol?: SortOrder
    price?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type AssetSumOrderByAggregateInput = {
    price?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type WalletCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type WalletMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type WalletMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type WalletRelationFilter = {
    is?: WalletWhereInput | null
    isNot?: WalletWhereInput | null
  }

  export type AssetRelationFilter = {
    is?: AssetWhereInput | null
    isNot?: AssetWhereInput | null
  }

  export type WalletAssetWallet_idAsset_idCompoundUniqueInput = {
    wallet_id: string
    asset_id: string
  }

  export type WalletAssetCountOrderByAggregateInput = {
    id?: SortOrder
    wallet_id?: SortOrder
    asset_id?: SortOrder
    shares?: SortOrder
    version?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type WalletAssetAvgOrderByAggregateInput = {
    shares?: SortOrder
    version?: SortOrder
  }

  export type WalletAssetMaxOrderByAggregateInput = {
    id?: SortOrder
    wallet_id?: SortOrder
    asset_id?: SortOrder
    shares?: SortOrder
    version?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type WalletAssetMinOrderByAggregateInput = {
    id?: SortOrder
    wallet_id?: SortOrder
    asset_id?: SortOrder
    shares?: SortOrder
    version?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type WalletAssetSumOrderByAggregateInput = {
    shares?: SortOrder
    version?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type EnumOrderTypeFilter = {
    equals?: OrderType
    in?: Enumerable<OrderType>
    notIn?: Enumerable<OrderType>
    not?: NestedEnumOrderTypeFilter | OrderType
  }

  export type EnumOrderStatusFilter = {
    equals?: OrderStatus
    in?: Enumerable<OrderStatus>
    notIn?: Enumerable<OrderStatus>
    not?: NestedEnumOrderStatusFilter | OrderStatus
  }

  export type TransactionListRelationFilter = {
    every?: TransactionWhereInput
    some?: TransactionWhereInput
    none?: TransactionWhereInput
  }

  export type TransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderCountOrderByAggregateInput = {
    id?: SortOrder
    wallet_id?: SortOrder
    asset_id?: SortOrder
    shares?: SortOrder
    price?: SortOrder
    type?: SortOrder
    status?: SortOrder
    partial?: SortOrder
    version?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type OrderAvgOrderByAggregateInput = {
    shares?: SortOrder
    price?: SortOrder
    partial?: SortOrder
    version?: SortOrder
  }

  export type OrderMaxOrderByAggregateInput = {
    id?: SortOrder
    wallet_id?: SortOrder
    asset_id?: SortOrder
    shares?: SortOrder
    price?: SortOrder
    type?: SortOrder
    status?: SortOrder
    partial?: SortOrder
    version?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type OrderMinOrderByAggregateInput = {
    id?: SortOrder
    wallet_id?: SortOrder
    asset_id?: SortOrder
    shares?: SortOrder
    price?: SortOrder
    type?: SortOrder
    status?: SortOrder
    partial?: SortOrder
    version?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type OrderSumOrderByAggregateInput = {
    shares?: SortOrder
    price?: SortOrder
    partial?: SortOrder
    version?: SortOrder
  }

  export type EnumOrderTypeWithAggregatesFilter = {
    equals?: OrderType
    in?: Enumerable<OrderType>
    notIn?: Enumerable<OrderType>
    not?: NestedEnumOrderTypeWithAggregatesFilter | OrderType
    _count?: NestedIntFilter
    _min?: NestedEnumOrderTypeFilter
    _max?: NestedEnumOrderTypeFilter
  }

  export type EnumOrderStatusWithAggregatesFilter = {
    equals?: OrderStatus
    in?: Enumerable<OrderStatus>
    notIn?: Enumerable<OrderStatus>
    not?: NestedEnumOrderStatusWithAggregatesFilter | OrderStatus
    _count?: NestedIntFilter
    _min?: NestedEnumOrderStatusFilter
    _max?: NestedEnumOrderStatusFilter
  }

  export type OrderRelationFilter = {
    is?: OrderWhereInput | null
    isNot?: OrderWhereInput | null
  }

  export type TransactionCountOrderByAggregateInput = {
    id?: SortOrder
    order_id?: SortOrder
    related_investor_id?: SortOrder
    broker_transaction_id?: SortOrder
    shares?: SortOrder
    price?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TransactionAvgOrderByAggregateInput = {
    shares?: SortOrder
    price?: SortOrder
  }

  export type TransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    order_id?: SortOrder
    related_investor_id?: SortOrder
    broker_transaction_id?: SortOrder
    shares?: SortOrder
    price?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TransactionMinOrderByAggregateInput = {
    id?: SortOrder
    order_id?: SortOrder
    related_investor_id?: SortOrder
    broker_transaction_id?: SortOrder
    shares?: SortOrder
    price?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TransactionSumOrderByAggregateInput = {
    shares?: SortOrder
    price?: SortOrder
  }

  export type WalletAssetCreateNestedManyWithoutAssetInput = {
    create?: XOR<Enumerable<WalletAssetCreateWithoutAssetInput>, Enumerable<WalletAssetUncheckedCreateWithoutAssetInput>>
    connectOrCreate?: Enumerable<WalletAssetCreateOrConnectWithoutAssetInput>
    createMany?: WalletAssetCreateManyAssetInputEnvelope
    connect?: Enumerable<WalletAssetWhereUniqueInput>
  }

  export type OrderCreateNestedManyWithoutAssetInput = {
    create?: XOR<Enumerable<OrderCreateWithoutAssetInput>, Enumerable<OrderUncheckedCreateWithoutAssetInput>>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutAssetInput>
    createMany?: OrderCreateManyAssetInputEnvelope
    connect?: Enumerable<OrderWhereUniqueInput>
  }

  export type WalletAssetUncheckedCreateNestedManyWithoutAssetInput = {
    create?: XOR<Enumerable<WalletAssetCreateWithoutAssetInput>, Enumerable<WalletAssetUncheckedCreateWithoutAssetInput>>
    connectOrCreate?: Enumerable<WalletAssetCreateOrConnectWithoutAssetInput>
    createMany?: WalletAssetCreateManyAssetInputEnvelope
    connect?: Enumerable<WalletAssetWhereUniqueInput>
  }

  export type OrderUncheckedCreateNestedManyWithoutAssetInput = {
    create?: XOR<Enumerable<OrderCreateWithoutAssetInput>, Enumerable<OrderUncheckedCreateWithoutAssetInput>>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutAssetInput>
    createMany?: OrderCreateManyAssetInputEnvelope
    connect?: Enumerable<OrderWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type WalletAssetUpdateManyWithoutAssetNestedInput = {
    create?: XOR<Enumerable<WalletAssetCreateWithoutAssetInput>, Enumerable<WalletAssetUncheckedCreateWithoutAssetInput>>
    connectOrCreate?: Enumerable<WalletAssetCreateOrConnectWithoutAssetInput>
    upsert?: Enumerable<WalletAssetUpsertWithWhereUniqueWithoutAssetInput>
    createMany?: WalletAssetCreateManyAssetInputEnvelope
    set?: Enumerable<WalletAssetWhereUniqueInput>
    disconnect?: Enumerable<WalletAssetWhereUniqueInput>
    delete?: Enumerable<WalletAssetWhereUniqueInput>
    connect?: Enumerable<WalletAssetWhereUniqueInput>
    update?: Enumerable<WalletAssetUpdateWithWhereUniqueWithoutAssetInput>
    updateMany?: Enumerable<WalletAssetUpdateManyWithWhereWithoutAssetInput>
    deleteMany?: Enumerable<WalletAssetScalarWhereInput>
  }

  export type OrderUpdateManyWithoutAssetNestedInput = {
    create?: XOR<Enumerable<OrderCreateWithoutAssetInput>, Enumerable<OrderUncheckedCreateWithoutAssetInput>>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutAssetInput>
    upsert?: Enumerable<OrderUpsertWithWhereUniqueWithoutAssetInput>
    createMany?: OrderCreateManyAssetInputEnvelope
    set?: Enumerable<OrderWhereUniqueInput>
    disconnect?: Enumerable<OrderWhereUniqueInput>
    delete?: Enumerable<OrderWhereUniqueInput>
    connect?: Enumerable<OrderWhereUniqueInput>
    update?: Enumerable<OrderUpdateWithWhereUniqueWithoutAssetInput>
    updateMany?: Enumerable<OrderUpdateManyWithWhereWithoutAssetInput>
    deleteMany?: Enumerable<OrderScalarWhereInput>
  }

  export type WalletAssetUncheckedUpdateManyWithoutAssetNestedInput = {
    create?: XOR<Enumerable<WalletAssetCreateWithoutAssetInput>, Enumerable<WalletAssetUncheckedCreateWithoutAssetInput>>
    connectOrCreate?: Enumerable<WalletAssetCreateOrConnectWithoutAssetInput>
    upsert?: Enumerable<WalletAssetUpsertWithWhereUniqueWithoutAssetInput>
    createMany?: WalletAssetCreateManyAssetInputEnvelope
    set?: Enumerable<WalletAssetWhereUniqueInput>
    disconnect?: Enumerable<WalletAssetWhereUniqueInput>
    delete?: Enumerable<WalletAssetWhereUniqueInput>
    connect?: Enumerable<WalletAssetWhereUniqueInput>
    update?: Enumerable<WalletAssetUpdateWithWhereUniqueWithoutAssetInput>
    updateMany?: Enumerable<WalletAssetUpdateManyWithWhereWithoutAssetInput>
    deleteMany?: Enumerable<WalletAssetScalarWhereInput>
  }

  export type OrderUncheckedUpdateManyWithoutAssetNestedInput = {
    create?: XOR<Enumerable<OrderCreateWithoutAssetInput>, Enumerable<OrderUncheckedCreateWithoutAssetInput>>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutAssetInput>
    upsert?: Enumerable<OrderUpsertWithWhereUniqueWithoutAssetInput>
    createMany?: OrderCreateManyAssetInputEnvelope
    set?: Enumerable<OrderWhereUniqueInput>
    disconnect?: Enumerable<OrderWhereUniqueInput>
    delete?: Enumerable<OrderWhereUniqueInput>
    connect?: Enumerable<OrderWhereUniqueInput>
    update?: Enumerable<OrderUpdateWithWhereUniqueWithoutAssetInput>
    updateMany?: Enumerable<OrderUpdateManyWithWhereWithoutAssetInput>
    deleteMany?: Enumerable<OrderScalarWhereInput>
  }

  export type WalletAssetCreateNestedManyWithoutWalletInput = {
    create?: XOR<Enumerable<WalletAssetCreateWithoutWalletInput>, Enumerable<WalletAssetUncheckedCreateWithoutWalletInput>>
    connectOrCreate?: Enumerable<WalletAssetCreateOrConnectWithoutWalletInput>
    createMany?: WalletAssetCreateManyWalletInputEnvelope
    connect?: Enumerable<WalletAssetWhereUniqueInput>
  }

  export type OrderCreateNestedManyWithoutWalletInput = {
    create?: XOR<Enumerable<OrderCreateWithoutWalletInput>, Enumerable<OrderUncheckedCreateWithoutWalletInput>>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutWalletInput>
    createMany?: OrderCreateManyWalletInputEnvelope
    connect?: Enumerable<OrderWhereUniqueInput>
  }

  export type WalletAssetUncheckedCreateNestedManyWithoutWalletInput = {
    create?: XOR<Enumerable<WalletAssetCreateWithoutWalletInput>, Enumerable<WalletAssetUncheckedCreateWithoutWalletInput>>
    connectOrCreate?: Enumerable<WalletAssetCreateOrConnectWithoutWalletInput>
    createMany?: WalletAssetCreateManyWalletInputEnvelope
    connect?: Enumerable<WalletAssetWhereUniqueInput>
  }

  export type OrderUncheckedCreateNestedManyWithoutWalletInput = {
    create?: XOR<Enumerable<OrderCreateWithoutWalletInput>, Enumerable<OrderUncheckedCreateWithoutWalletInput>>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutWalletInput>
    createMany?: OrderCreateManyWalletInputEnvelope
    connect?: Enumerable<OrderWhereUniqueInput>
  }

  export type WalletAssetUpdateManyWithoutWalletNestedInput = {
    create?: XOR<Enumerable<WalletAssetCreateWithoutWalletInput>, Enumerable<WalletAssetUncheckedCreateWithoutWalletInput>>
    connectOrCreate?: Enumerable<WalletAssetCreateOrConnectWithoutWalletInput>
    upsert?: Enumerable<WalletAssetUpsertWithWhereUniqueWithoutWalletInput>
    createMany?: WalletAssetCreateManyWalletInputEnvelope
    set?: Enumerable<WalletAssetWhereUniqueInput>
    disconnect?: Enumerable<WalletAssetWhereUniqueInput>
    delete?: Enumerable<WalletAssetWhereUniqueInput>
    connect?: Enumerable<WalletAssetWhereUniqueInput>
    update?: Enumerable<WalletAssetUpdateWithWhereUniqueWithoutWalletInput>
    updateMany?: Enumerable<WalletAssetUpdateManyWithWhereWithoutWalletInput>
    deleteMany?: Enumerable<WalletAssetScalarWhereInput>
  }

  export type OrderUpdateManyWithoutWalletNestedInput = {
    create?: XOR<Enumerable<OrderCreateWithoutWalletInput>, Enumerable<OrderUncheckedCreateWithoutWalletInput>>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutWalletInput>
    upsert?: Enumerable<OrderUpsertWithWhereUniqueWithoutWalletInput>
    createMany?: OrderCreateManyWalletInputEnvelope
    set?: Enumerable<OrderWhereUniqueInput>
    disconnect?: Enumerable<OrderWhereUniqueInput>
    delete?: Enumerable<OrderWhereUniqueInput>
    connect?: Enumerable<OrderWhereUniqueInput>
    update?: Enumerable<OrderUpdateWithWhereUniqueWithoutWalletInput>
    updateMany?: Enumerable<OrderUpdateManyWithWhereWithoutWalletInput>
    deleteMany?: Enumerable<OrderScalarWhereInput>
  }

  export type WalletAssetUncheckedUpdateManyWithoutWalletNestedInput = {
    create?: XOR<Enumerable<WalletAssetCreateWithoutWalletInput>, Enumerable<WalletAssetUncheckedCreateWithoutWalletInput>>
    connectOrCreate?: Enumerable<WalletAssetCreateOrConnectWithoutWalletInput>
    upsert?: Enumerable<WalletAssetUpsertWithWhereUniqueWithoutWalletInput>
    createMany?: WalletAssetCreateManyWalletInputEnvelope
    set?: Enumerable<WalletAssetWhereUniqueInput>
    disconnect?: Enumerable<WalletAssetWhereUniqueInput>
    delete?: Enumerable<WalletAssetWhereUniqueInput>
    connect?: Enumerable<WalletAssetWhereUniqueInput>
    update?: Enumerable<WalletAssetUpdateWithWhereUniqueWithoutWalletInput>
    updateMany?: Enumerable<WalletAssetUpdateManyWithWhereWithoutWalletInput>
    deleteMany?: Enumerable<WalletAssetScalarWhereInput>
  }

  export type OrderUncheckedUpdateManyWithoutWalletNestedInput = {
    create?: XOR<Enumerable<OrderCreateWithoutWalletInput>, Enumerable<OrderUncheckedCreateWithoutWalletInput>>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutWalletInput>
    upsert?: Enumerable<OrderUpsertWithWhereUniqueWithoutWalletInput>
    createMany?: OrderCreateManyWalletInputEnvelope
    set?: Enumerable<OrderWhereUniqueInput>
    disconnect?: Enumerable<OrderWhereUniqueInput>
    delete?: Enumerable<OrderWhereUniqueInput>
    connect?: Enumerable<OrderWhereUniqueInput>
    update?: Enumerable<OrderUpdateWithWhereUniqueWithoutWalletInput>
    updateMany?: Enumerable<OrderUpdateManyWithWhereWithoutWalletInput>
    deleteMany?: Enumerable<OrderScalarWhereInput>
  }

  export type WalletCreateNestedOneWithoutWalletAssetsInput = {
    create?: XOR<WalletCreateWithoutWalletAssetsInput, WalletUncheckedCreateWithoutWalletAssetsInput>
    connectOrCreate?: WalletCreateOrConnectWithoutWalletAssetsInput
    connect?: WalletWhereUniqueInput
  }

  export type AssetCreateNestedOneWithoutWalletAssetsInput = {
    create?: XOR<AssetCreateWithoutWalletAssetsInput, AssetUncheckedCreateWithoutWalletAssetsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutWalletAssetsInput
    connect?: AssetWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type WalletUpdateOneRequiredWithoutWalletAssetsNestedInput = {
    create?: XOR<WalletCreateWithoutWalletAssetsInput, WalletUncheckedCreateWithoutWalletAssetsInput>
    connectOrCreate?: WalletCreateOrConnectWithoutWalletAssetsInput
    upsert?: WalletUpsertWithoutWalletAssetsInput
    connect?: WalletWhereUniqueInput
    update?: XOR<XOR<WalletUpdateToOneWithWhereWithoutWalletAssetsInput, WalletUpdateWithoutWalletAssetsInput>, WalletUncheckedUpdateWithoutWalletAssetsInput>
  }

  export type AssetUpdateOneRequiredWithoutWalletAssetsNestedInput = {
    create?: XOR<AssetCreateWithoutWalletAssetsInput, AssetUncheckedCreateWithoutWalletAssetsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutWalletAssetsInput
    upsert?: AssetUpsertWithoutWalletAssetsInput
    connect?: AssetWhereUniqueInput
    update?: XOR<XOR<AssetUpdateToOneWithWhereWithoutWalletAssetsInput, AssetUpdateWithoutWalletAssetsInput>, AssetUncheckedUpdateWithoutWalletAssetsInput>
  }

  export type WalletCreateNestedOneWithoutOrdersInput = {
    create?: XOR<WalletCreateWithoutOrdersInput, WalletUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: WalletCreateOrConnectWithoutOrdersInput
    connect?: WalletWhereUniqueInput
  }

  export type AssetCreateNestedOneWithoutOrdersInput = {
    create?: XOR<AssetCreateWithoutOrdersInput, AssetUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: AssetCreateOrConnectWithoutOrdersInput
    connect?: AssetWhereUniqueInput
  }

  export type TransactionCreateNestedManyWithoutOrderInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutOrderInput>, Enumerable<TransactionUncheckedCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutOrderInput>
    createMany?: TransactionCreateManyOrderInputEnvelope
    connect?: Enumerable<TransactionWhereUniqueInput>
  }

  export type TransactionUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutOrderInput>, Enumerable<TransactionUncheckedCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutOrderInput>
    createMany?: TransactionCreateManyOrderInputEnvelope
    connect?: Enumerable<TransactionWhereUniqueInput>
  }

  export type EnumOrderTypeFieldUpdateOperationsInput = {
    set?: OrderType
  }

  export type EnumOrderStatusFieldUpdateOperationsInput = {
    set?: OrderStatus
  }

  export type WalletUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<WalletCreateWithoutOrdersInput, WalletUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: WalletCreateOrConnectWithoutOrdersInput
    upsert?: WalletUpsertWithoutOrdersInput
    connect?: WalletWhereUniqueInput
    update?: XOR<XOR<WalletUpdateToOneWithWhereWithoutOrdersInput, WalletUpdateWithoutOrdersInput>, WalletUncheckedUpdateWithoutOrdersInput>
  }

  export type AssetUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<AssetCreateWithoutOrdersInput, AssetUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: AssetCreateOrConnectWithoutOrdersInput
    upsert?: AssetUpsertWithoutOrdersInput
    connect?: AssetWhereUniqueInput
    update?: XOR<XOR<AssetUpdateToOneWithWhereWithoutOrdersInput, AssetUpdateWithoutOrdersInput>, AssetUncheckedUpdateWithoutOrdersInput>
  }

  export type TransactionUpdateManyWithoutOrderNestedInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutOrderInput>, Enumerable<TransactionUncheckedCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutOrderInput>
    upsert?: Enumerable<TransactionUpsertWithWhereUniqueWithoutOrderInput>
    createMany?: TransactionCreateManyOrderInputEnvelope
    set?: Enumerable<TransactionWhereUniqueInput>
    disconnect?: Enumerable<TransactionWhereUniqueInput>
    delete?: Enumerable<TransactionWhereUniqueInput>
    connect?: Enumerable<TransactionWhereUniqueInput>
    update?: Enumerable<TransactionUpdateWithWhereUniqueWithoutOrderInput>
    updateMany?: Enumerable<TransactionUpdateManyWithWhereWithoutOrderInput>
    deleteMany?: Enumerable<TransactionScalarWhereInput>
  }

  export type TransactionUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutOrderInput>, Enumerable<TransactionUncheckedCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutOrderInput>
    upsert?: Enumerable<TransactionUpsertWithWhereUniqueWithoutOrderInput>
    createMany?: TransactionCreateManyOrderInputEnvelope
    set?: Enumerable<TransactionWhereUniqueInput>
    disconnect?: Enumerable<TransactionWhereUniqueInput>
    delete?: Enumerable<TransactionWhereUniqueInput>
    connect?: Enumerable<TransactionWhereUniqueInput>
    update?: Enumerable<TransactionUpdateWithWhereUniqueWithoutOrderInput>
    updateMany?: Enumerable<TransactionUpdateManyWithWhereWithoutOrderInput>
    deleteMany?: Enumerable<TransactionScalarWhereInput>
  }

  export type OrderCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<OrderCreateWithoutTransactionsInput, OrderUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutTransactionsInput
    connect?: OrderWhereUniqueInput
  }

  export type OrderUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<OrderCreateWithoutTransactionsInput, OrderUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutTransactionsInput
    upsert?: OrderUpsertWithoutTransactionsInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutTransactionsInput, OrderUpdateWithoutTransactionsInput>, OrderUncheckedUpdateWithoutTransactionsInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedEnumOrderTypeFilter = {
    equals?: OrderType
    in?: Enumerable<OrderType>
    notIn?: Enumerable<OrderType>
    not?: NestedEnumOrderTypeFilter | OrderType
  }

  export type NestedEnumOrderStatusFilter = {
    equals?: OrderStatus
    in?: Enumerable<OrderStatus>
    notIn?: Enumerable<OrderStatus>
    not?: NestedEnumOrderStatusFilter | OrderStatus
  }

  export type NestedEnumOrderTypeWithAggregatesFilter = {
    equals?: OrderType
    in?: Enumerable<OrderType>
    notIn?: Enumerable<OrderType>
    not?: NestedEnumOrderTypeWithAggregatesFilter | OrderType
    _count?: NestedIntFilter
    _min?: NestedEnumOrderTypeFilter
    _max?: NestedEnumOrderTypeFilter
  }

  export type NestedEnumOrderStatusWithAggregatesFilter = {
    equals?: OrderStatus
    in?: Enumerable<OrderStatus>
    notIn?: Enumerable<OrderStatus>
    not?: NestedEnumOrderStatusWithAggregatesFilter | OrderStatus
    _count?: NestedIntFilter
    _min?: NestedEnumOrderStatusFilter
    _max?: NestedEnumOrderStatusFilter
  }

  export type WalletAssetCreateWithoutAssetInput = {
    id?: string
    shares: number
    version: number
    created_at?: Date | string
    updated_at?: Date | string
    Wallet: WalletCreateNestedOneWithoutWalletAssetsInput
  }

  export type WalletAssetUncheckedCreateWithoutAssetInput = {
    id?: string
    wallet_id: string
    shares: number
    version: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type WalletAssetCreateOrConnectWithoutAssetInput = {
    where: WalletAssetWhereUniqueInput
    create: XOR<WalletAssetCreateWithoutAssetInput, WalletAssetUncheckedCreateWithoutAssetInput>
  }

  export type WalletAssetCreateManyAssetInputEnvelope = {
    data: Enumerable<WalletAssetCreateManyAssetInput>
  }

  export type OrderCreateWithoutAssetInput = {
    id?: string
    shares: number
    price: number
    type: OrderType
    status: OrderStatus
    partial: number
    version: number
    created_at?: Date | string
    updated_at?: Date | string
    Wallet: WalletCreateNestedOneWithoutOrdersInput
    Transactions?: TransactionCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutAssetInput = {
    id?: string
    wallet_id: string
    shares: number
    price: number
    type: OrderType
    status: OrderStatus
    partial: number
    version: number
    created_at?: Date | string
    updated_at?: Date | string
    Transactions?: TransactionUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutAssetInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutAssetInput, OrderUncheckedCreateWithoutAssetInput>
  }

  export type OrderCreateManyAssetInputEnvelope = {
    data: Enumerable<OrderCreateManyAssetInput>
  }

  export type WalletAssetUpsertWithWhereUniqueWithoutAssetInput = {
    where: WalletAssetWhereUniqueInput
    update: XOR<WalletAssetUpdateWithoutAssetInput, WalletAssetUncheckedUpdateWithoutAssetInput>
    create: XOR<WalletAssetCreateWithoutAssetInput, WalletAssetUncheckedCreateWithoutAssetInput>
  }

  export type WalletAssetUpdateWithWhereUniqueWithoutAssetInput = {
    where: WalletAssetWhereUniqueInput
    data: XOR<WalletAssetUpdateWithoutAssetInput, WalletAssetUncheckedUpdateWithoutAssetInput>
  }

  export type WalletAssetUpdateManyWithWhereWithoutAssetInput = {
    where: WalletAssetScalarWhereInput
    data: XOR<WalletAssetUpdateManyMutationInput, WalletAssetUncheckedUpdateManyWithoutWalletAssetsInput>
  }

  export type WalletAssetScalarWhereInput = {
    AND?: Enumerable<WalletAssetScalarWhereInput>
    OR?: Enumerable<WalletAssetScalarWhereInput>
    NOT?: Enumerable<WalletAssetScalarWhereInput>
    id?: StringFilter | string
    wallet_id?: StringFilter | string
    asset_id?: StringFilter | string
    shares?: IntFilter | number
    version?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
  }

  export type OrderUpsertWithWhereUniqueWithoutAssetInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutAssetInput, OrderUncheckedUpdateWithoutAssetInput>
    create: XOR<OrderCreateWithoutAssetInput, OrderUncheckedCreateWithoutAssetInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutAssetInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutAssetInput, OrderUncheckedUpdateWithoutAssetInput>
  }

  export type OrderUpdateManyWithWhereWithoutAssetInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutOrdersInput>
  }

  export type OrderScalarWhereInput = {
    AND?: Enumerable<OrderScalarWhereInput>
    OR?: Enumerable<OrderScalarWhereInput>
    NOT?: Enumerable<OrderScalarWhereInput>
    id?: StringFilter | string
    wallet_id?: StringFilter | string
    asset_id?: StringFilter | string
    shares?: IntFilter | number
    price?: FloatFilter | number
    type?: EnumOrderTypeFilter | OrderType
    status?: EnumOrderStatusFilter | OrderStatus
    partial?: IntFilter | number
    version?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
  }

  export type WalletAssetCreateWithoutWalletInput = {
    id?: string
    shares: number
    version: number
    created_at?: Date | string
    updated_at?: Date | string
    Asset: AssetCreateNestedOneWithoutWalletAssetsInput
  }

  export type WalletAssetUncheckedCreateWithoutWalletInput = {
    id?: string
    asset_id: string
    shares: number
    version: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type WalletAssetCreateOrConnectWithoutWalletInput = {
    where: WalletAssetWhereUniqueInput
    create: XOR<WalletAssetCreateWithoutWalletInput, WalletAssetUncheckedCreateWithoutWalletInput>
  }

  export type WalletAssetCreateManyWalletInputEnvelope = {
    data: Enumerable<WalletAssetCreateManyWalletInput>
  }

  export type OrderCreateWithoutWalletInput = {
    id?: string
    shares: number
    price: number
    type: OrderType
    status: OrderStatus
    partial: number
    version: number
    created_at?: Date | string
    updated_at?: Date | string
    Asset: AssetCreateNestedOneWithoutOrdersInput
    Transactions?: TransactionCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutWalletInput = {
    id?: string
    asset_id: string
    shares: number
    price: number
    type: OrderType
    status: OrderStatus
    partial: number
    version: number
    created_at?: Date | string
    updated_at?: Date | string
    Transactions?: TransactionUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutWalletInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutWalletInput, OrderUncheckedCreateWithoutWalletInput>
  }

  export type OrderCreateManyWalletInputEnvelope = {
    data: Enumerable<OrderCreateManyWalletInput>
  }

  export type WalletAssetUpsertWithWhereUniqueWithoutWalletInput = {
    where: WalletAssetWhereUniqueInput
    update: XOR<WalletAssetUpdateWithoutWalletInput, WalletAssetUncheckedUpdateWithoutWalletInput>
    create: XOR<WalletAssetCreateWithoutWalletInput, WalletAssetUncheckedCreateWithoutWalletInput>
  }

  export type WalletAssetUpdateWithWhereUniqueWithoutWalletInput = {
    where: WalletAssetWhereUniqueInput
    data: XOR<WalletAssetUpdateWithoutWalletInput, WalletAssetUncheckedUpdateWithoutWalletInput>
  }

  export type WalletAssetUpdateManyWithWhereWithoutWalletInput = {
    where: WalletAssetScalarWhereInput
    data: XOR<WalletAssetUpdateManyMutationInput, WalletAssetUncheckedUpdateManyWithoutWalletAssetsInput>
  }

  export type OrderUpsertWithWhereUniqueWithoutWalletInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutWalletInput, OrderUncheckedUpdateWithoutWalletInput>
    create: XOR<OrderCreateWithoutWalletInput, OrderUncheckedCreateWithoutWalletInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutWalletInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutWalletInput, OrderUncheckedUpdateWithoutWalletInput>
  }

  export type OrderUpdateManyWithWhereWithoutWalletInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutOrdersInput>
  }

  export type WalletCreateWithoutWalletAssetsInput = {
    id: string
    created_at?: Date | string
    updated_at?: Date | string
    Orders?: OrderCreateNestedManyWithoutWalletInput
  }

  export type WalletUncheckedCreateWithoutWalletAssetsInput = {
    id: string
    created_at?: Date | string
    updated_at?: Date | string
    Orders?: OrderUncheckedCreateNestedManyWithoutWalletInput
  }

  export type WalletCreateOrConnectWithoutWalletAssetsInput = {
    where: WalletWhereUniqueInput
    create: XOR<WalletCreateWithoutWalletAssetsInput, WalletUncheckedCreateWithoutWalletAssetsInput>
  }

  export type AssetCreateWithoutWalletAssetsInput = {
    id: string
    symbol: string
    price: number
    created_at?: Date | string
    updated_at?: Date | string
    Orders?: OrderCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutWalletAssetsInput = {
    id: string
    symbol: string
    price: number
    created_at?: Date | string
    updated_at?: Date | string
    Orders?: OrderUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutWalletAssetsInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutWalletAssetsInput, AssetUncheckedCreateWithoutWalletAssetsInput>
  }

  export type WalletUpsertWithoutWalletAssetsInput = {
    update: XOR<WalletUpdateWithoutWalletAssetsInput, WalletUncheckedUpdateWithoutWalletAssetsInput>
    create: XOR<WalletCreateWithoutWalletAssetsInput, WalletUncheckedCreateWithoutWalletAssetsInput>
    where?: WalletWhereInput
  }

  export type WalletUpdateToOneWithWhereWithoutWalletAssetsInput = {
    where?: WalletWhereInput
    data: XOR<WalletUpdateWithoutWalletAssetsInput, WalletUncheckedUpdateWithoutWalletAssetsInput>
  }

  export type WalletUpdateWithoutWalletAssetsInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Orders?: OrderUpdateManyWithoutWalletNestedInput
  }

  export type WalletUncheckedUpdateWithoutWalletAssetsInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Orders?: OrderUncheckedUpdateManyWithoutWalletNestedInput
  }

  export type AssetUpsertWithoutWalletAssetsInput = {
    update: XOR<AssetUpdateWithoutWalletAssetsInput, AssetUncheckedUpdateWithoutWalletAssetsInput>
    create: XOR<AssetCreateWithoutWalletAssetsInput, AssetUncheckedCreateWithoutWalletAssetsInput>
    where?: AssetWhereInput
  }

  export type AssetUpdateToOneWithWhereWithoutWalletAssetsInput = {
    where?: AssetWhereInput
    data: XOR<AssetUpdateWithoutWalletAssetsInput, AssetUncheckedUpdateWithoutWalletAssetsInput>
  }

  export type AssetUpdateWithoutWalletAssetsInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Orders?: OrderUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutWalletAssetsInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Orders?: OrderUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type WalletCreateWithoutOrdersInput = {
    id: string
    created_at?: Date | string
    updated_at?: Date | string
    WalletAssets?: WalletAssetCreateNestedManyWithoutWalletInput
  }

  export type WalletUncheckedCreateWithoutOrdersInput = {
    id: string
    created_at?: Date | string
    updated_at?: Date | string
    WalletAssets?: WalletAssetUncheckedCreateNestedManyWithoutWalletInput
  }

  export type WalletCreateOrConnectWithoutOrdersInput = {
    where: WalletWhereUniqueInput
    create: XOR<WalletCreateWithoutOrdersInput, WalletUncheckedCreateWithoutOrdersInput>
  }

  export type AssetCreateWithoutOrdersInput = {
    id: string
    symbol: string
    price: number
    created_at?: Date | string
    updated_at?: Date | string
    WalletAssets?: WalletAssetCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutOrdersInput = {
    id: string
    symbol: string
    price: number
    created_at?: Date | string
    updated_at?: Date | string
    WalletAssets?: WalletAssetUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutOrdersInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutOrdersInput, AssetUncheckedCreateWithoutOrdersInput>
  }

  export type TransactionCreateWithoutOrderInput = {
    id?: string
    related_investor_id: string
    broker_transaction_id: string
    shares: number
    price: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type TransactionUncheckedCreateWithoutOrderInput = {
    id?: string
    related_investor_id: string
    broker_transaction_id: string
    shares: number
    price: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type TransactionCreateOrConnectWithoutOrderInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutOrderInput, TransactionUncheckedCreateWithoutOrderInput>
  }

  export type TransactionCreateManyOrderInputEnvelope = {
    data: Enumerable<TransactionCreateManyOrderInput>
  }

  export type WalletUpsertWithoutOrdersInput = {
    update: XOR<WalletUpdateWithoutOrdersInput, WalletUncheckedUpdateWithoutOrdersInput>
    create: XOR<WalletCreateWithoutOrdersInput, WalletUncheckedCreateWithoutOrdersInput>
    where?: WalletWhereInput
  }

  export type WalletUpdateToOneWithWhereWithoutOrdersInput = {
    where?: WalletWhereInput
    data: XOR<WalletUpdateWithoutOrdersInput, WalletUncheckedUpdateWithoutOrdersInput>
  }

  export type WalletUpdateWithoutOrdersInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    WalletAssets?: WalletAssetUpdateManyWithoutWalletNestedInput
  }

  export type WalletUncheckedUpdateWithoutOrdersInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    WalletAssets?: WalletAssetUncheckedUpdateManyWithoutWalletNestedInput
  }

  export type AssetUpsertWithoutOrdersInput = {
    update: XOR<AssetUpdateWithoutOrdersInput, AssetUncheckedUpdateWithoutOrdersInput>
    create: XOR<AssetCreateWithoutOrdersInput, AssetUncheckedCreateWithoutOrdersInput>
    where?: AssetWhereInput
  }

  export type AssetUpdateToOneWithWhereWithoutOrdersInput = {
    where?: AssetWhereInput
    data: XOR<AssetUpdateWithoutOrdersInput, AssetUncheckedUpdateWithoutOrdersInput>
  }

  export type AssetUpdateWithoutOrdersInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    WalletAssets?: WalletAssetUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutOrdersInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    WalletAssets?: WalletAssetUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type TransactionUpsertWithWhereUniqueWithoutOrderInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutOrderInput, TransactionUncheckedUpdateWithoutOrderInput>
    create: XOR<TransactionCreateWithoutOrderInput, TransactionUncheckedCreateWithoutOrderInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutOrderInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutOrderInput, TransactionUncheckedUpdateWithoutOrderInput>
  }

  export type TransactionUpdateManyWithWhereWithoutOrderInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutTransactionsInput>
  }

  export type TransactionScalarWhereInput = {
    AND?: Enumerable<TransactionScalarWhereInput>
    OR?: Enumerable<TransactionScalarWhereInput>
    NOT?: Enumerable<TransactionScalarWhereInput>
    id?: StringFilter | string
    order_id?: StringFilter | string
    related_investor_id?: StringFilter | string
    broker_transaction_id?: StringFilter | string
    shares?: IntFilter | number
    price?: FloatFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
  }

  export type OrderCreateWithoutTransactionsInput = {
    id?: string
    shares: number
    price: number
    type: OrderType
    status: OrderStatus
    partial: number
    version: number
    created_at?: Date | string
    updated_at?: Date | string
    Wallet: WalletCreateNestedOneWithoutOrdersInput
    Asset: AssetCreateNestedOneWithoutOrdersInput
  }

  export type OrderUncheckedCreateWithoutTransactionsInput = {
    id?: string
    wallet_id: string
    asset_id: string
    shares: number
    price: number
    type: OrderType
    status: OrderStatus
    partial: number
    version: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type OrderCreateOrConnectWithoutTransactionsInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutTransactionsInput, OrderUncheckedCreateWithoutTransactionsInput>
  }

  export type OrderUpsertWithoutTransactionsInput = {
    update: XOR<OrderUpdateWithoutTransactionsInput, OrderUncheckedUpdateWithoutTransactionsInput>
    create: XOR<OrderCreateWithoutTransactionsInput, OrderUncheckedCreateWithoutTransactionsInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutTransactionsInput, OrderUncheckedUpdateWithoutTransactionsInput>
  }

  export type OrderUpdateWithoutTransactionsInput = {
    shares?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    type?: EnumOrderTypeFieldUpdateOperationsInput | OrderType
    status?: EnumOrderStatusFieldUpdateOperationsInput | OrderStatus
    partial?: IntFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Wallet?: WalletUpdateOneRequiredWithoutOrdersNestedInput
    Asset?: AssetUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type OrderUncheckedUpdateWithoutTransactionsInput = {
    wallet_id?: StringFieldUpdateOperationsInput | string
    asset_id?: StringFieldUpdateOperationsInput | string
    shares?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    type?: EnumOrderTypeFieldUpdateOperationsInput | OrderType
    status?: EnumOrderStatusFieldUpdateOperationsInput | OrderStatus
    partial?: IntFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WalletAssetCreateManyAssetInput = {
    id?: string
    wallet_id: string
    shares: number
    version: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type OrderCreateManyAssetInput = {
    id?: string
    wallet_id: string
    shares: number
    price: number
    type: OrderType
    status: OrderStatus
    partial: number
    version: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type WalletAssetUpdateWithoutAssetInput = {
    shares?: IntFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Wallet?: WalletUpdateOneRequiredWithoutWalletAssetsNestedInput
  }

  export type WalletAssetUncheckedUpdateWithoutAssetInput = {
    wallet_id?: StringFieldUpdateOperationsInput | string
    shares?: IntFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WalletAssetUncheckedUpdateManyWithoutWalletAssetsInput = {
    wallet_id?: StringFieldUpdateOperationsInput | string
    shares?: IntFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUpdateWithoutAssetInput = {
    shares?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    type?: EnumOrderTypeFieldUpdateOperationsInput | OrderType
    status?: EnumOrderStatusFieldUpdateOperationsInput | OrderStatus
    partial?: IntFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Wallet?: WalletUpdateOneRequiredWithoutOrdersNestedInput
    Transactions?: TransactionUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutAssetInput = {
    wallet_id?: StringFieldUpdateOperationsInput | string
    shares?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    type?: EnumOrderTypeFieldUpdateOperationsInput | OrderType
    status?: EnumOrderStatusFieldUpdateOperationsInput | OrderStatus
    partial?: IntFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Transactions?: TransactionUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutOrdersInput = {
    wallet_id?: StringFieldUpdateOperationsInput | string
    shares?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    type?: EnumOrderTypeFieldUpdateOperationsInput | OrderType
    status?: EnumOrderStatusFieldUpdateOperationsInput | OrderStatus
    partial?: IntFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WalletAssetCreateManyWalletInput = {
    id?: string
    asset_id: string
    shares: number
    version: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type OrderCreateManyWalletInput = {
    id?: string
    asset_id: string
    shares: number
    price: number
    type: OrderType
    status: OrderStatus
    partial: number
    version: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type WalletAssetUpdateWithoutWalletInput = {
    shares?: IntFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Asset?: AssetUpdateOneRequiredWithoutWalletAssetsNestedInput
  }

  export type WalletAssetUncheckedUpdateWithoutWalletInput = {
    asset_id?: StringFieldUpdateOperationsInput | string
    shares?: IntFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUpdateWithoutWalletInput = {
    shares?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    type?: EnumOrderTypeFieldUpdateOperationsInput | OrderType
    status?: EnumOrderStatusFieldUpdateOperationsInput | OrderStatus
    partial?: IntFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Asset?: AssetUpdateOneRequiredWithoutOrdersNestedInput
    Transactions?: TransactionUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutWalletInput = {
    asset_id?: StringFieldUpdateOperationsInput | string
    shares?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    type?: EnumOrderTypeFieldUpdateOperationsInput | OrderType
    status?: EnumOrderStatusFieldUpdateOperationsInput | OrderStatus
    partial?: IntFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Transactions?: TransactionUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type TransactionCreateManyOrderInput = {
    id?: string
    related_investor_id: string
    broker_transaction_id: string
    shares: number
    price: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type TransactionUpdateWithoutOrderInput = {
    related_investor_id?: StringFieldUpdateOperationsInput | string
    broker_transaction_id?: StringFieldUpdateOperationsInput | string
    shares?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateWithoutOrderInput = {
    related_investor_id?: StringFieldUpdateOperationsInput | string
    broker_transaction_id?: StringFieldUpdateOperationsInput | string
    shares?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyWithoutTransactionsInput = {
    related_investor_id?: StringFieldUpdateOperationsInput | string
    broker_transaction_id?: StringFieldUpdateOperationsInput | string
    shares?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}